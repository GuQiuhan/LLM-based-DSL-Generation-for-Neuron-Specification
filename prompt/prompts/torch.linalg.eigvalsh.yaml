api: torch.linalg.eigvalsh
doc: "\n\ntorch.linalg.eigvalsh(A, UPLO='L', *, out=None) \u2192 Tensor\xB6\nComputes\
  \ the eigenvalues of a complex Hermitian or real symmetric matrix.\nLetting K\\\
  mathbb{K}K be R\\mathbb{R}R or C\\mathbb{C}C,\nthe eigenvalues of a complex Hermitian\
  \ or real symmetric  matrix A\u2208Kn\xD7nA \\in \\mathbb{K}^{n \\times n}A\u2208\
  Kn\xD7n\nare defined as the roots (counted with multiplicity) of the polynomial\
  \ p of degree n given by\n\np(\u03BB)=det\u2061(A\u2212\u03BBIn)\u03BB\u2208Rp(\\\
  lambda) = \\operatorname{det}(A - \\lambda \\mathrm{I}_n)\\mathrlap{\\qquad \\lambda\
  \ \\in \\mathbb{R}}p(\u03BB)=det(A\u2212\u03BBIn\u200B)\u03BB\u2208Rwhere In\\mathrm{I}_nIn\u200B\
  \ is the n-dimensional identity matrix.\nThe eigenvalues of a real symmetric or\
  \ complex Hermitian matrix are always real.\nSupports input of float, double, cfloat\
  \ and cdouble dtypes.\nAlso supports batches of matrices, and if A is a batch of\
  \ matrices then\nthe output has the same batch dimensions.\nThe eigenvalues are\
  \ returned in ascending order.\nA is assumed to be Hermitian (resp. symmetric),\
  \ but this is not checked internally, instead:\n\nIf UPLO= \u2018L\u2019 (default),\
  \ only the lower triangular part of the matrix is used in the computation.\nIf UPLO=\
  \ \u2018U\u2019, only the upper triangular part of the matrix is used.\n\n\nNote\n\
  When inputs are on a CUDA device, this function synchronizes that device with the\
  \ CPU.\n\n\nSee also\ntorch.linalg.eigh() computes the full eigenvalue decomposition.\n\
  \n\nParameters\n\nA (Tensor) \u2013 tensor of shape (*, n, n) where * is zero or\
  \ more batch dimensions\nconsisting of symmetric or Hermitian matrices.\nUPLO ('L',\
  \ 'U', optional) \u2013 controls whether to use the upper or lower triangular part\n\
  of A in the computations. Default: \u2018L\u2019.\n\n\nKeyword Arguments\nout (Tensor,\
  \ optional) \u2013 output tensor. Ignored if None. Default: None.\n\nReturns\nA\
  \ real-valued tensor containing the eigenvalues even when A is complex.\nThe eigenvalues\
  \ are returned in ascending order.\n\n\nExamples:\n>>> A = torch.randn(2, 2, dtype=torch.complex128)\n\
  >>> A = A + A.T.conj()  # creates a Hermitian matrix\n>>> A\ntensor([[2.9228+0.0000j,\
  \ 0.2029-0.0862j],\n        [0.2029+0.0862j, 0.3464+0.0000j]], dtype=torch.complex128)\n\
  >>> torch.linalg.eigvalsh(A)\ntensor([0.3277, 2.9415], dtype=torch.float64)\n\n\
  >>> A = torch.randn(3, 2, 2, dtype=torch.float64)\n>>> A = A + A.mT  # creates a\
  \ batch of symmetric matrices\n>>> torch.linalg.eigvalsh(A)\ntensor([[ 2.5797, \
  \ 3.4629],\n        [-4.1605,  1.3780],\n        [-3.1113,  2.7381]], dtype=torch.float64)\n\
  \n\n"
