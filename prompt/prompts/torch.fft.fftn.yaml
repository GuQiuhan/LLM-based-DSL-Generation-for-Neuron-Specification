api: torch.fft.fftn
doc: "\n\ntorch.fft.fftn(input, s=None, dim=None, norm=None, *, out=None) \u2192 Tensor\xB6\
  \nComputes the N dimensional discrete Fourier transform of input.\n\nNote\nThe Fourier\
  \ domain representation of any real signal satisfies the\nHermitian property: X[i_1,\
  \ ..., i_n] = conj(X[-i_1, ..., -i_n]). This\nfunction always returns all positive\
  \ and negative frequency terms even\nthough, for real inputs, half of these values\
  \ are redundant.\nrfftn() returns the more compact one-sided representation\nwhere\
  \ only the positive frequencies of the last dimension are returned.\n\n\nNote\n\
  Supports torch.half and torch.chalf on CUDA with GPU Architecture SM53 or greater.\n\
  However it only supports powers of 2 signal length in every transformed dimensions.\n\
  \n\nParameters\n\ninput (Tensor) \u2013 the input tensor\ns (Tuple[int], optional)\
  \ \u2013 Signal size in the transformed dimensions.\nIf given, each dimension dim[i]\
  \ will either be zero-padded or\ntrimmed to the length s[i] before computing the\
  \ FFT.\nIf a length -1 is specified, no padding is done in that dimension.\nDefault:\
  \ s = [input.size(d) for d in dim]\ndim (Tuple[int], optional) \u2013 Dimensions\
  \ to be transformed.\nDefault: all dimensions, or the last len(s) dimensions if\
  \ s is given.\nnorm (str, optional) \u2013 Normalization mode. For the forward transform\n\
  (fftn()), these correspond to:\n\n\"forward\" - normalize by 1/n\n\"backward\" -\
  \ no normalization\n\"ortho\" - normalize by 1/sqrt(n) (making the FFT orthonormal)\n\
  \nWhere n = prod(s) is the logical FFT size.\nCalling the backward transform (ifftn())\
  \ with the same\nnormalization mode will apply an overall normalization of 1/n\n\
  between the two transforms. This is required to make\nifftn() the exact inverse.\n\
  Default is \"backward\" (no normalization).\n\n\n\nKeyword Arguments\nout (Tensor,\
  \ optional) \u2013 the output tensor.\n\n\nExample\n>>> x = torch.rand(10, 10, dtype=torch.complex64)\n\
  >>> fftn = torch.fft.fftn(x)\n\n\nThe discrete Fourier transform is separable, so\
  \ fftn()\nhere is equivalent to two one-dimensional fft() calls:\n>>> two_ffts =\
  \ torch.fft.fft(torch.fft.fft(x, dim=0), dim=1)\n>>> torch.testing.assert_close(fftn,\
  \ two_ffts, check_stride=False)\n\n\n"
