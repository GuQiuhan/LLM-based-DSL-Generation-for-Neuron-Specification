api: torch.fft.ihfftn
doc: "\n\ntorch.fft.ihfftn(input, s=None, dim=None, norm=None, *, out=None) \u2192\
  \ Tensor\xB6\nComputes the N-dimensional inverse discrete Fourier transform of real\
  \ input.\ninput must be a real-valued signal, interpreted in the Fourier domain.\n\
  The n-dimensional IFFT of a real signal is Hermitian-symmetric,\nX[i, j, ...] =\
  \ conj(X[-i, -j, ...]). ihfftn() represents\nthis in the one-sided form where only\
  \ the positive frequencies below the\nNyquist frequency are included in the last\
  \ signal dimension. To compute the\nfull output, use ifftn().\n\nNote\nSupports\
  \ torch.half on CUDA with GPU Architecture SM53 or greater.\nHowever it only supports\
  \ powers of 2 signal length in every transformed dimensions.\n\n\nParameters\n\n\
  input (Tensor) \u2013 the input tensor\ns (Tuple[int], optional) \u2013 Signal size\
  \ in the transformed dimensions.\nIf given, each dimension dim[i] will either be\
  \ zero-padded or\ntrimmed to the length s[i] before computing the Hermitian IFFT.\n\
  If a length -1 is specified, no padding is done in that dimension.\nDefault: s =\
  \ [input.size(d) for d in dim]\ndim (Tuple[int], optional) \u2013 Dimensions to\
  \ be transformed.\nDefault: all dimensions, or the last len(s) dimensions if s is\
  \ given.\nnorm (str, optional) \u2013 Normalization mode. For the backward transform\n\
  (ihfftn()), these correspond to:\n\n\"forward\" - no normalization\n\"backward\"\
  \ - normalize by 1/n\n\"ortho\" - normalize by 1/sqrt(n) (making the Hermitian IFFT\
  \ orthonormal)\n\nWhere n = prod(s) is the logical IFFT size.\nCalling the forward\
  \ transform (hfftn()) with the same\nnormalization mode will apply an overall normalization\
  \ of 1/n between\nthe two transforms. This is required to make ihfftn()\nthe exact\
  \ inverse.\nDefault is \"backward\" (normalize by 1/n).\n\n\n\nKeyword Arguments\n\
  out (Tensor, optional) \u2013 the output tensor.\n\n\nExample\n>>> T = torch.rand(10,\
  \ 10)\n>>> ihfftn = torch.fft.ihfftn(T)\n>>> ihfftn.size()\ntorch.Size([10, 6])\n\
  \n\nCompared against the full output from ifftn(), we have all\nelements up to the\
  \ Nyquist frequency.\n>>> ifftn = torch.fft.ifftn(t)\n>>> torch.allclose(ifftn[...,\
  \ :6], ihfftn)\nTrue\n\n\nThe discrete Fourier transform is separable, so ihfftn()\n\
  here is equivalent to a combination of ihfft() and\nifft():\n>>> two_iffts = torch.fft.ifft(torch.fft.ihfft(t,\
  \ dim=1), dim=0)\n>>> torch.allclose(ihfftn, two_iffts)\nTrue\n\n\n"
