api: torch.linalg.eigvals
doc: "\n\ntorch.linalg.eigvals(A, *, out=None) \u2192 Tensor\xB6\nComputes the eigenvalues\
  \ of a square matrix.\nLetting K\\mathbb{K}K be R\\mathbb{R}R or C\\mathbb{C}C,\n\
  the eigenvalues of a square matrix A\u2208Kn\xD7nA \\in \\mathbb{K}^{n \\times n}A\u2208\
  Kn\xD7n are defined\nas the roots (counted with multiplicity) of the polynomial\
  \ p of degree n given by\n\np(\u03BB)=det\u2061(A\u2212\u03BBIn)\u03BB\u2208Cp(\\\
  lambda) = \\operatorname{det}(A - \\lambda \\mathrm{I}_n)\\mathrlap{\\qquad \\lambda\
  \ \\in \\mathbb{C}}p(\u03BB)=det(A\u2212\u03BBIn\u200B)\u03BB\u2208Cwhere In\\mathrm{I}_nIn\u200B\
  \ is the n-dimensional identity matrix.\nSupports input of float, double, cfloat\
  \ and cdouble dtypes.\nAlso supports batches of matrices, and if A is a batch of\
  \ matrices then\nthe output has the same batch dimensions.\nThe returned eigenvalues\
  \ are not guaranteed to be in any specific order.\n\nNote\nThe eigenvalues of a\
  \ real matrix may be complex, as the roots of a real polynomial may be complex.\n\
  The eigenvalues of a matrix are always well-defined, even when the matrix is not\
  \ diagonalizable.\n\n\nNote\nWhen inputs are on a CUDA device, this function synchronizes\
  \ that device with the CPU.\n\n\nSee also\ntorch.linalg.eig() computes the full\
  \ eigenvalue decomposition.\n\n\nParameters\nA (Tensor) \u2013 tensor of shape (*,\
  \ n, n) where * is zero or more batch dimensions.\n\nKeyword Arguments\nout (Tensor,\
  \ optional) \u2013 output tensor. Ignored if None. Default: None.\n\nReturns\nA\
  \ complex-valued tensor containing the eigenvalues even when A is real.\n\n\nExamples:\n\
  >>> A = torch.randn(2, 2, dtype=torch.complex128)\n>>> L = torch.linalg.eigvals(A)\n\
  >>> L\ntensor([ 1.1226+0.5738j, -0.7537-0.1286j], dtype=torch.complex128)\n\n>>>\
  \ torch.dist(L, torch.linalg.eig(A).eigenvalues)\ntensor(2.4576e-07)\n\n\n"
