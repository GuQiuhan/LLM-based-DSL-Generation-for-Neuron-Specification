api: torch.fft.ihfft
doc: "\n\ntorch.fft.ihfft(input, n=None, dim=-1, norm=None, *, out=None) \u2192 Tensor\xB6\
  \nComputes the inverse of hfft().\ninput must be a real-valued signal, interpreted\
  \ in the Fourier domain.\nThe IFFT of a real signal is Hermitian-symmetric, X[i]\
  \ = conj(X[-i]).\nihfft() represents this in the one-sided form where only the\n\
  positive frequencies below the Nyquist frequency are included. To compute the\n\
  full output, use ifft().\n\nNote\nSupports torch.half on CUDA with GPU Architecture\
  \ SM53 or greater.\nHowever it only supports powers of 2 signal length in every\
  \ transformed dimension.\n\n\nParameters\n\ninput (Tensor) \u2013 the real input\
  \ tensor\nn (int, optional) \u2013 Signal length. If given, the input will either\
  \ be zero-padded\nor trimmed to this length before computing the Hermitian IFFT.\n\
  dim (int, optional) \u2013 The dimension along which to take the one dimensional\
  \ Hermitian IFFT.\nnorm (str, optional) \u2013 Normalization mode. For the backward\
  \ transform\n(ihfft()), these correspond to:\n\n\"forward\" - no normalization\n\
  \"backward\" - normalize by 1/n\n\"ortho\" - normalize by 1/sqrt(n) (making the\
  \ IFFT orthonormal)\n\nCalling the forward transform (hfft()) with the same\nnormalization\
  \ mode will apply an overall normalization of 1/n between\nthe two transforms. This\
  \ is required to make ihfft()\nthe exact inverse.\nDefault is \"backward\" (normalize\
  \ by 1/n).\n\n\n\nKeyword Arguments\nout (Tensor, optional) \u2013 the output tensor.\n\
  \n\nExample\n>>> t = torch.arange(5)\n>>> t\ntensor([0, 1, 2, 3, 4])\n>>> torch.fft.ihfft(t)\n\
  tensor([ 2.0000-0.0000j, -0.5000-0.6882j, -0.5000-0.1625j])\n\n\nCompare against\
  \ the full output from ifft():\n>>> torch.fft.ifft(t)\ntensor([ 2.0000-0.0000j,\
  \ -0.5000-0.6882j, -0.5000-0.1625j, -0.5000+0.1625j,\n        -0.5000+0.6882j])\n\
  \n\n"
