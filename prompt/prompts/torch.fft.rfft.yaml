api: torch.fft.rfft
doc: "\n\ntorch.fft.rfft(input, n=None, dim=-1, norm=None, *, out=None) \u2192 Tensor\xB6\
  \nComputes the one dimensional Fourier transform of real-valued input.\nThe FFT\
  \ of a real signal is Hermitian-symmetric, X[i] = conj(X[-i]) so\nthe output contains\
  \ only the positive frequencies below the Nyquist frequency.\nTo compute the full\
  \ output, use fft()\n\nNote\nSupports torch.half on CUDA with GPU Architecture SM53\
  \ or greater.\nHowever it only supports powers of 2 signal length in every transformed\
  \ dimension.\n\n\nParameters\n\ninput (Tensor) \u2013 the real input tensor\nn (int,\
  \ optional) \u2013 Signal length. If given, the input will either be zero-padded\n\
  or trimmed to this length before computing the real FFT.\ndim (int, optional) \u2013\
  \ The dimension along which to take the one dimensional real FFT.\nnorm (str, optional)\
  \ \u2013 Normalization mode. For the forward transform\n(rfft()), these correspond\
  \ to:\n\n\"forward\" - normalize by 1/n\n\"backward\" - no normalization\n\"ortho\"\
  \ - normalize by 1/sqrt(n) (making the FFT orthonormal)\n\nCalling the backward\
  \ transform (irfft()) with the same\nnormalization mode will apply an overall normalization\
  \ of 1/n between\nthe two transforms. This is required to make irfft()\nthe exact\
  \ inverse.\nDefault is \"backward\" (no normalization).\n\n\n\nKeyword Arguments\n\
  out (Tensor, optional) \u2013 the output tensor.\n\n\nExample\n>>> t = torch.arange(4)\n\
  >>> t\ntensor([0, 1, 2, 3])\n>>> torch.fft.rfft(t)\ntensor([ 6.+0.j, -2.+2.j, -2.+0.j])\n\
  \n\nCompare against the full output from fft():\n>>> torch.fft.fft(t)\ntensor([\
  \ 6.+0.j, -2.+2.j, -2.+0.j, -2.-2.j])\n\n\nNotice that the symmetric element T[-1]\
  \ == T[1].conj() is omitted.\nAt the Nyquist frequency T[-2] == T[2] is it\u2019\
  s own symmetric pair,\nand therefore must always be real-valued.\n"
