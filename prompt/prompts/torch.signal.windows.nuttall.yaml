api: torch.signal.windows.nuttall
doc: "\n\ntorch.signal.windows.nuttall(M, *, sym=True, dtype=None, layout=torch.strided,\
  \ device=None, requires_grad=False)[source]\xB6\nComputes the minimum 4-term Blackman-Harris\
  \ window according to Nuttall.\n\nwn=1\u22120.36358cos\u2061(zn)+0.48917cos\u2061\
  (2zn)\u22120.13659cos\u2061(3zn)+0.01064cos\u2061(4zn)w_n = 1 - 0.36358 \\cos{(z_n)}\
  \ + 0.48917 \\cos{(2z_n)} - 0.13659 \\cos{(3z_n)} + 0.01064 \\cos{(4z_n)}\n\nwn\u200B\
  =1\u22120.36358cos(zn\u200B)+0.48917cos(2zn\u200B)\u22120.13659cos(3zn\u200B)+0.01064cos(4zn\u200B\
  )where zn=2\u03C0nMz_n = \\frac{2 \\pi n}{M}zn\u200B=M2\u03C0n\u200B.\nThe window\
  \ is normalized to 1 (maximum value is 1). However, the 1 doesn\u2019t appear if\
  \ M is even and sym is True.\n\nParameters\nM (int) \u2013 the length of the window.\n\
  In other words, the number of points of the returned window.\n\nKeyword Arguments\n\
  \nsym (bool, optional) \u2013 If False, returns a periodic window suitable for use\
  \ in spectral analysis.\nIf True, returns a symmetric window suitable for use in\
  \ filter design. Default: True.\ndtype (torch.dtype, optional) \u2013 the desired\
  \ data type of returned tensor.\nDefault: if None, uses a global default (see torch.set_default_dtype()).\n\
  layout (torch.layout, optional) \u2013 the desired layout of returned Tensor.\n\
  Default: torch.strided.\ndevice (torch.device, optional) \u2013 the desired device\
  \ of returned tensor.\nDefault: if None, uses the current device for the default\
  \ tensor type\n(see torch.set_default_device()). device will be the CPU\nfor CPU\
  \ tensor types and the current CUDA device for CUDA tensor types.\nrequires_grad\
  \ (bool, optional) \u2013 If autograd should record operations on the\nreturned\
  \ tensor. Default: False.\n\n\nReturn type\nTensor\n\n\nReferences:\n- A. Nuttall,\
  \ \"Some windows with very good sidelobe behavior,\"\n  IEEE Transactions on Acoustics,\
  \ Speech, and Signal Processing, vol. 29, no. 1, pp. 84-91,\n  Feb 1981. https://doi.org/10.1109/TASSP.1981.1163506\n\
  \n- Heinzel G. et al., \"Spectrum and spectral density estimation by the Discrete\
  \ Fourier transform (DFT),\n  including a comprehensive list of window functions\
  \ and some new flat-top windows\",\n  February 15, 2002 https://holometer.fnal.gov/GH_FFT.pdf\n\
  \n\nExamples:\n>>> # Generates a symmetric Nutall window.\n>>> torch.signal.windows.general_hamming(5,\
  \ sym=True)\ntensor([3.6280e-04, 2.2698e-01, 1.0000e+00, 2.2698e-01, 3.6280e-04])\n\
  \n>>> # Generates a periodic Nuttall window.\n>>> torch.signal.windows.general_hamming(5,\
  \ sym=False)\ntensor([3.6280e-04, 1.1052e-01, 7.9826e-01, 7.9826e-01, 1.1052e-01])\n\
  \n\n"
