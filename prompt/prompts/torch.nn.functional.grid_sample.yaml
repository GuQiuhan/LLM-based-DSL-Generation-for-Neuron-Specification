api: torch.nn.functional.grid_sample
doc: "\n\ntorch.nn.functional.grid_sample(input, grid, mode='bilinear', padding_mode='zeros',\
  \ align_corners=None)[source]\xB6\nCompute grid sample.\nGiven an input and a flow-field\
  \ grid, computes the\noutput using input values and pixel locations from grid.\n\
  Currently, only spatial (4-D) and volumetric (5-D) input are\nsupported.\nIn the\
  \ spatial (4-D) case, for input with shape\n(N,C,Hin,Win)(N, C, H_\\text{in}, W_\\\
  text{in})(N,C,Hin\u200B,Win\u200B) and grid with shape\n(N,Hout,Wout,2)(N, H_\\\
  text{out}, W_\\text{out}, 2)(N,Hout\u200B,Wout\u200B,2), the output will have shape\n\
  (N,C,Hout,Wout)(N, C, H_\\text{out}, W_\\text{out})(N,C,Hout\u200B,Wout\u200B).\n\
  For each output location output[n, :, h, w], the size-2 vector\ngrid[n, h, w] specifies\
  \ input pixel locations x and y,\nwhich are used to interpolate the output value\
  \ output[n, :, h, w].\nIn the case of 5D inputs, grid[n, d, h, w] specifies the\n\
  x, y, z pixel locations for interpolating\noutput[n, :, d, h, w]. mode argument\
  \ specifies nearest or\nbilinear interpolation method to sample the input pixels.\n\
  grid specifies the sampling pixel locations normalized by the\ninput spatial dimensions.\
  \ Therefore, it should have most values in\nthe range of [-1, 1]. For example, values\
  \ x = -1, y = -1 is the\nleft-top pixel of input, and values  x = 1, y = 1 is the\n\
  right-bottom pixel of input.\nIf grid has values outside the range of [-1, 1], the\
  \ corresponding\noutputs are handled as defined by padding_mode. Options are\n\n\
  \npadding_mode=\"zeros\": use 0 for out-of-bound grid locations,\npadding_mode=\"\
  border\": use border values for out-of-bound grid locations,\npadding_mode=\"reflection\"\
  : use values at locations reflected by\nthe border for out-of-bound grid locations.\
  \ For location far away\nfrom the border, it will keep being reflected until becoming\
  \ in bound,\ne.g., (normalized) pixel location x = -3.5 reflects by border -1\n\
  and becomes x' = 1.5, then reflects by border 1 and becomes\nx'' = -0.5.\n\n\n\n\
  Note\nThis function is often used in conjunction with affine_grid()\nto build Spatial\
  \ Transformer Networks .\n\n\nNote\nWhen using the CUDA backend, this operation\
  \ may induce nondeterministic\nbehaviour in its backward pass that is not easily\
  \ switched off.\nPlease see the notes on Reproducibility for background.\n\n\nNote\n\
  NaN values in grid would be interpreted as -1.\n\n\nParameters\n\ninput (Tensor)\
  \ \u2013 input of shape (N,C,Hin,Win)(N, C, H_\\text{in}, W_\\text{in})(N,C,Hin\u200B\
  ,Win\u200B) (4-D case)\nor (N,C,Din,Hin,Win)(N, C, D_\\text{in}, H_\\text{in}, W_\\\
  text{in})(N,C,Din\u200B,Hin\u200B,Win\u200B) (5-D case)\ngrid (Tensor) \u2013 flow-field\
  \ of shape (N,Hout,Wout,2)(N, H_\\text{out}, W_\\text{out}, 2)(N,Hout\u200B,Wout\u200B\
  ,2) (4-D case)\nor (N,Dout,Hout,Wout,3)(N, D_\\text{out}, H_\\text{out}, W_\\text{out},\
  \ 3)(N,Dout\u200B,Hout\u200B,Wout\u200B,3) (5-D case)\nmode (str) \u2013 interpolation\
  \ mode to calculate output values\n'bilinear' | 'nearest' | 'bicubic'. Default:\
  \ 'bilinear'\nNote: mode='bicubic' supports only 4-D input.\nWhen mode='bilinear'\
  \ and the input is 5-D, the interpolation mode\nused internally will actually be\
  \ trilinear. However, when the input is 4-D,\nthe interpolation mode will legitimately\
  \ be bilinear.\npadding_mode (str) \u2013 padding mode for outside grid values\n\
  'zeros' | 'border' | 'reflection'. Default: 'zeros'\nalign_corners (bool, optional)\
  \ \u2013 Geometrically, we consider the pixels of the\ninput  as squares rather\
  \ than points.\nIf set to True, the extrema (-1 and 1) are considered as referring\n\
  to the center points of the input\u2019s corner pixels. If set to False, they\n\
  are instead considered as referring to the corner points of the input\u2019s corner\n\
  pixels, making the sampling more resolution agnostic.\nThis option parallels the\
  \ align_corners option in\ninterpolate(), and so whichever option is used here\n\
  should also be used there to resize the input image before grid sampling.\nDefault:\
  \ False\n\n\nReturns\noutput Tensor\n\nReturn type\noutput (Tensor)\n\n\n\nWarning\n\
  When align_corners = True, the grid positions depend on the pixel\nsize relative\
  \ to the input image size, and so the locations sampled by\ngrid_sample() will differ\
  \ for the same input given at different\nresolutions (that is, after being upsampled\
  \ or downsampled).\nThe default behavior up to version 1.2.0 was align_corners =\
  \ True.\nSince then, the default behavior has been changed to align_corners = False,\n\
  in order to bring it in line with the default for interpolate().\n\n\nNote\nmode='bicubic'\
  \ is implemented using the cubic convolution algorithm with \u03B1=\u22120.75\\\
  alpha=-0.75\u03B1=\u22120.75.\nThe constant \u03B1\\alpha\u03B1 might be different\
  \ from packages to packages.\nFor example, PIL and OpenCV use -0.5 and -0.75 respectively.\n\
  This algorithm may \u201Covershoot\u201D the range of values it\u2019s interpolating.\n\
  For example, it may produce negative values or values greater than 255 when interpolating\
  \ input in [0, 255].\nClamp the results with torch.clamp() to ensure they are within\
  \ the valid range.\n\n"
