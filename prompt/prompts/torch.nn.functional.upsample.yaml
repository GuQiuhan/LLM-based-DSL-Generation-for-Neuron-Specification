api: torch.nn.functional.upsample
doc: "\n\ntorch.nn.functional.upsample(input, size=None, scale_factor=None, mode='nearest',\
  \ align_corners=None)[source]\xB6\nUpsample input.\nProvided tensor is upsampled\
  \ to either the given size or the given\nscale_factor\n\nWarning\nThis function\
  \ is deprecated in favor of torch.nn.functional.interpolate().\nThis is equivalent\
  \ with nn.functional.interpolate(...).\n\n\nNote\nThis operation may produce nondeterministic\
  \ gradients when given tensors on a CUDA device. See Reproducibility for more information.\n\
  \nThe algorithm used for upsampling is determined by mode.\nCurrently temporal,\
  \ spatial and volumetric upsampling are supported, i.e.\nexpected inputs are 3-D,\
  \ 4-D or 5-D in shape.\nThe input dimensions are interpreted in the form:\nmini-batch\
  \ x channels x [optional depth] x [optional height] x width.\nThe modes available\
  \ for upsampling are: nearest, linear (3D-only),\nbilinear, bicubic (4D-only), trilinear\
  \ (5D-only)\n\nParameters\n\ninput (Tensor) \u2013 the input tensor\nsize (int or\
  \ Tuple[int] or Tuple[int, int] or Tuple[int, int, int]) \u2013 output spatial size.\n\
  scale_factor (float or Tuple[float]) \u2013 multiplier for spatial size. Has to\
  \ match input size if it is a tuple.\nmode (str) \u2013 algorithm used for upsampling:\n\
  'nearest' | 'linear' | 'bilinear' | 'bicubic' |\n'trilinear'. Default: 'nearest'\n\
  align_corners (bool, optional) \u2013 Geometrically, we consider the pixels of the\n\
  input and output as squares rather than points.\nIf set to True, the input and output\
  \ tensors are aligned by the\ncenter points of their corner pixels, preserving the\
  \ values at the corner pixels.\nIf set to False, the input and output tensors are\
  \ aligned by the corner\npoints of their corner pixels, and the interpolation uses\
  \ edge value padding\nfor out-of-boundary values, making this operation independent\
  \ of input size\nwhen scale_factor is kept the same. This only has an effect when\
  \ mode\nis 'linear', 'bilinear', 'bicubic' or 'trilinear'.\nDefault: False\n\n\n\
  \n\nNote\nWith mode='bicubic', it\u2019s possible to cause overshoot, in other words\
  \ it can produce\nnegative values or values greater than 255 for images.\nExplicitly\
  \ call result.clamp(min=0, max=255) if you want to reduce the overshoot\nwhen displaying\
  \ the image.\n\n\nWarning\nWith align_corners = True, the linearly interpolating\
  \ modes\n(linear, bilinear, and trilinear) don\u2019t proportionally align the\n\
  output and input pixels, and thus the output values can depend on the\ninput size.\
  \ This was the default behavior for these modes up to version\n0.3.1. Since then,\
  \ the default behavior is align_corners = False.\nSee Upsample for concrete examples\
  \ on how this\naffects the outputs.\n\n"
