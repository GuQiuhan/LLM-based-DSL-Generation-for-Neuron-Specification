api: torch.fft.fftshift
doc: "\n\ntorch.fft.fftshift(input, dim=None) \u2192 Tensor\xB6\nReorders n-dimensional\
  \ FFT data, as provided by fftn(), to have\nnegative frequency terms first.\nThis\
  \ performs a periodic shift of n-dimensional data such that the origin\n(0, ...,\
  \ 0) is moved to the center of the tensor. Specifically, to\ninput.shape[dim] //\
  \ 2 in each selected dimension.\n\nNote\nBy convention, the FFT returns positive\
  \ frequency terms first, followed by\nthe negative frequencies in reverse order,\
  \ so that f[-i] for all\n0<i\u2264n/20 < i \\leq n/20<i\u2264n/2 in Python gives\
  \ the negative frequency terms.\nfftshift() rearranges all frequencies into ascending\
  \ order\nfrom negative to positive with the zero-frequency term in the center.\n\
  \n\nNote\nFor even lengths, the Nyquist frequency at f[n/2] can be thought of as\n\
  either negative or positive. fftshift() always puts the\nNyquist term at the 0-index.\
  \ This is the same convention used by\nfftfreq().\n\n\nParameters\n\ninput (Tensor)\
  \ \u2013 the tensor in FFT order\ndim (int, Tuple[int], optional) \u2013 The dimensions\
  \ to rearrange.\nOnly dimensions specified here will be rearranged, any other dimensions\n\
  will be left in their original order.\nDefault: All dimensions of input.\n\n\n\n\
  Example\n>>> f = torch.fft.fftfreq(4)\n>>> f\ntensor([ 0.0000,  0.2500, -0.5000,\
  \ -0.2500])\n\n\n>>> torch.fft.fftshift(f)\ntensor([-0.5000, -0.2500,  0.0000, \
  \ 0.2500])\n\n\nAlso notice that the Nyquist frequency term at f[2] was moved to\
  \ the\nbeginning of the tensor.\nThis also works for multi-dimensional transforms:\n\
  >>> x = torch.fft.fftfreq(5, d=1/5) + 0.1 * torch.fft.fftfreq(5, d=1/5).unsqueeze(1)\n\
  >>> x\ntensor([[ 0.0000,  1.0000,  2.0000, -2.0000, -1.0000],\n        [ 0.1000,\
  \  1.1000,  2.1000, -1.9000, -0.9000],\n        [ 0.2000,  1.2000,  2.2000, -1.8000,\
  \ -0.8000],\n        [-0.2000,  0.8000,  1.8000, -2.2000, -1.2000],\n        [-0.1000,\
  \  0.9000,  1.9000, -2.1000, -1.1000]])\n\n\n>>> torch.fft.fftshift(x)\ntensor([[-2.2000,\
  \ -1.2000, -0.2000,  0.8000,  1.8000],\n        [-2.1000, -1.1000, -0.1000,  0.9000,\
  \  1.9000],\n        [-2.0000, -1.0000,  0.0000,  1.0000,  2.0000],\n        [-1.9000,\
  \ -0.9000,  0.1000,  1.1000,  2.1000],\n        [-1.8000, -0.8000,  0.2000,  1.2000,\
  \  2.2000]])\n\n\nfftshift() can also be useful for spatial data. If our\ndata is\
  \ defined on a centered grid ([-(N//2), (N-1)//2]) then we can\nuse the standard\
  \ FFT defined on an uncentered grid ([0, N)) by first\napplying an ifftshift().\n\
  >>> x_centered = torch.arange(-5, 5)\n>>> x_uncentered = torch.fft.ifftshift(x_centered)\n\
  >>> fft_uncentered = torch.fft.fft(x_uncentered)\n\n\nSimilarly, we can convert\
  \ the frequency domain components to centered\nconvention by applying fftshift().\n\
  >>> fft_centered = torch.fft.fftshift(fft_uncentered)\n\n\nThe inverse transform,\
  \ from centered Fourier space back to centered spatial\ndata, can be performed by\
  \ applying the inverse shifts in reverse order:\n>>> x_centered_2 = torch.fft.fftshift(torch.fft.ifft(torch.fft.ifftshift(fft_centered)))\n\
  >>> torch.testing.assert_close(x_centered.to(torch.complex64), x_centered_2, check_stride=False)\n\
  \n\n"
