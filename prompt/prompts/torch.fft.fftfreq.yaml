api: torch.fft.fftfreq
doc: "\n\ntorch.fft.fftfreq(n, d=1.0, *, out=None, dtype=None, layout=torch.strided,\
  \ device=None, requires_grad=False) \u2192 Tensor\xB6\nComputes the discrete Fourier\
  \ Transform sample frequencies for a signal of size n.\n\nNote\nBy convention, fft()\
  \ returns positive frequency terms\nfirst, followed by the negative frequencies\
  \ in reverse order, so that\nf[-i] for all 0<i\u2264n/20 < i \\leq n/20<i\u2264\
  n/2 in Python gives the negative\nfrequency terms. For an FFT of length n and with\
  \ inputs spaced in\nlength unit d, the frequencies are:\nf = [0, 1, ..., (n - 1)\
  \ // 2, -(n // 2), ..., -1] / (d * n)\n\n\n\n\nNote\nFor even lengths, the Nyquist\
  \ frequency at f[n/2] can be thought of as\neither negative or positive. fftfreq()\
  \ follows NumPy\u2019s\nconvention of taking it to be negative.\n\n\nParameters\n\
  \nn (int) \u2013 the FFT length\nd (float, optional) \u2013 The sampling length\
  \ scale.\nThe spacing between individual samples of the FFT input.\nThe default\
  \ assumes unit spacing, dividing that result by the actual\nspacing gives the result\
  \ in physical frequency units.\n\n\nKeyword Arguments\n\nout (Tensor, optional)\
  \ \u2013 the output tensor.\ndtype (torch.dtype, optional) \u2013 the desired data\
  \ type of returned tensor.\nDefault: if None, uses a global default (see torch.set_default_dtype()).\n\
  layout (torch.layout, optional) \u2013 the desired layout of returned Tensor.\n\
  Default: torch.strided.\ndevice (torch.device, optional) \u2013 the desired device\
  \ of returned tensor.\nDefault: if None, uses the current device for the default\
  \ tensor type\n(see torch.set_default_device()). device will be the CPU\nfor CPU\
  \ tensor types and the current CUDA device for CUDA tensor types.\nrequires_grad\
  \ (bool, optional) \u2013 If autograd should record operations on the\nreturned\
  \ tensor. Default: False.\n\n\n\nExample\n>>> torch.fft.fftfreq(5)\ntensor([ 0.0000,\
  \  0.2000,  0.4000, -0.4000, -0.2000])\n\n\nFor even input, we can see the Nyquist\
  \ frequency at f[2] is given as\nnegative:\n>>> torch.fft.fftfreq(4)\ntensor([ 0.0000,\
  \  0.2500, -0.5000, -0.2500])\n\n\n"
