api: torch.linalg.vector_norm
doc: "\n\ntorch.linalg.vector_norm(x, ord=2, dim=None, keepdim=False, *, dtype=None,\
  \ out=None) \u2192 Tensor\xB6\nComputes a vector norm.\nIf x is complex valued,\
  \ it computes the norm of x.abs()\nSupports input of float, double, cfloat and cdouble\
  \ dtypes.\nThis function does not necessarily treat multidimensional x as a batch\
  \ of\nvectors, instead:\n\nIf dim= None, x will be flattened before the norm is\
  \ computed.\nIf dim is an int or a tuple, the norm will be computed over these dimensions\n\
  and the other dimensions will be treated as batch dimensions.\n\nThis behavior is\
  \ for consistency with torch.linalg.norm().\nord defines the vector norm that is\
  \ computed. The following norms are supported:\n\n\nord\nvector norm\n\n\n\n2 (default)\n\
  2-norm (see below)\n\ninf\nmax(abs(x))\n\n-inf\nmin(abs(x))\n\n0\nsum(x != 0)\n\n\
  other int or float\nsum(abs(x)^{ord})^{(1 / ord)}\n\n\n\nwhere inf refers to float(\u2018\
  inf\u2019), NumPy\u2019s inf object, or any equivalent object.\ndtype may be used\
  \ to perform the computation in a more precise dtype.\nIt is semantically equivalent\
  \ to calling linalg.vector_norm(x.to(dtype))\nbut it is faster in some cases.\n\n\
  See also\ntorch.linalg.matrix_norm() computes a matrix norm.\n\n\nParameters\n\n\
  x (Tensor) \u2013 tensor, flattened by default, but this behavior can be\ncontrolled\
  \ using dim.\nord (int, float, inf, -inf, 'fro', 'nuc', optional) \u2013 order of\
  \ norm. Default: 2\ndim (int, Tuple[int], optional) \u2013 dimensions over which\
  \ to compute\nthe norm. See above for the behavior when dim= None.\nDefault: None\n\
  keepdim (bool, optional) \u2013 If set to True, the reduced dimensions are retained\n\
  in the result as dimensions with size one. Default: False\n\n\nKeyword Arguments\n\
  \nout (Tensor, optional) \u2013 output tensor. Ignored if None. Default: None.\n\
  dtype (torch.dtype, optional) \u2013 type used to perform the accumulation and the\
  \ return.\nIf specified, x is cast to dtype before performing the operation,\nand\
  \ the returned tensor\u2019s type will be dtype if real and of its real counterpart\
  \ if complex.\ndtype may be complex if x is complex, otherwise it must be real.\n\
  x should be convertible without narrowing to dtype. Default: None\n\n\nReturns\n\
  A real-valued tensor, even when x is complex.\n\n\nExamples:\n>>> from torch import\
  \ linalg as LA\n>>> a = torch.arange(9, dtype=torch.float) - 4\n>>> a\ntensor([-4.,\
  \ -3., -2., -1.,  0.,  1.,  2.,  3.,  4.])\n>>> B = a.reshape((3, 3))\n>>> B\ntensor([[-4.,\
  \ -3., -2.],\n        [-1.,  0.,  1.],\n        [ 2.,  3.,  4.]])\n>>> LA.vector_norm(a,\
  \ ord=3.5)\ntensor(5.4345)\n>>> LA.vector_norm(B, ord=3.5)\ntensor(5.4345)\n\n\n"
