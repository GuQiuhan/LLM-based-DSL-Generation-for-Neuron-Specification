api: torch.signal.windows.hamming
doc: "\n\ntorch.signal.windows.hamming(M, *, sym=True, dtype=None, layout=torch.strided,\
  \ device=None, requires_grad=False)[source]\xB6\nComputes the Hamming window.\n\
  The Hamming window is defined as follows:\n\nwn=\u03B1\u2212\u03B2\_cos\u2061(2\u03C0\
  nM\u22121)w_n = \\alpha - \\beta\\ \\cos \\left( \\frac{2 \\pi n}{M - 1} \\right)\n\
  \nwn\u200B=\u03B1\u2212\u03B2\_cos(M\u221212\u03C0n\u200B)The window is normalized\
  \ to 1 (maximum value is 1). However, the 1 doesn\u2019t appear if M is even and\
  \ sym is True.\n\nParameters\nM (int) \u2013 the length of the window.\nIn other\
  \ words, the number of points of the returned window.\n\nKeyword Arguments\n\nsym\
  \ (bool, optional) \u2013 If False, returns a periodic window suitable for use in\
  \ spectral analysis.\nIf True, returns a symmetric window suitable for use in filter\
  \ design. Default: True.\nalpha (float, optional) \u2013 The coefficient \u03B1\\\
  alpha\u03B1 in the equation above.\nbeta (float, optional) \u2013 The coefficient\
  \ \u03B2\\beta\u03B2 in the equation above.\ndtype (torch.dtype, optional) \u2013\
  \ the desired data type of returned tensor.\nDefault: if None, uses a global default\
  \ (see torch.set_default_dtype()).\nlayout (torch.layout, optional) \u2013 the desired\
  \ layout of returned Tensor.\nDefault: torch.strided.\ndevice (torch.device, optional)\
  \ \u2013 the desired device of returned tensor.\nDefault: if None, uses the current\
  \ device for the default tensor type\n(see torch.set_default_device()). device will\
  \ be the CPU\nfor CPU tensor types and the current CUDA device for CUDA tensor types.\n\
  requires_grad (bool, optional) \u2013 If autograd should record operations on the\n\
  returned tensor. Default: False.\n\n\nReturn type\nTensor\n\n\nExamples:\n>>> #\
  \ Generates a symmetric Hamming window.\n>>> torch.signal.windows.hamming(10)\n\
  tensor([0.0800, 0.1876, 0.4601, 0.7700, 0.9723, 0.9723, 0.7700, 0.4601, 0.1876,\
  \ 0.0800])\n\n>>> # Generates a periodic Hamming window.\n>>> torch.signal.windows.hamming(10,\
  \ sym=False)\ntensor([0.0800, 0.1679, 0.3979, 0.6821, 0.9121, 1.0000, 0.9121, 0.6821,\
  \ 0.3979, 0.1679])\n\n\n"
