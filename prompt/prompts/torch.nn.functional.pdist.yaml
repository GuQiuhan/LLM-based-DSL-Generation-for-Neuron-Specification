api: torch.nn.functional.pdist
doc: "\n\ntorch.nn.functional.pdist(input, p=2) \u2192 Tensor\xB6\nComputes the p-norm\
  \ distance between every pair of row vectors in the input.\nThis is identical to\
  \ the upper triangular portion, excluding the diagonal, of\ntorch.norm(input[:,\
  \ None] - input, dim=2, p=p). This function will be faster\nif the rows are contiguous.\n\
  If input has shape N\xD7MN \\times MN\xD7M then the output will have shape\n12N(N\u2212\
  1)\\frac{1}{2} N (N - 1)21\u200BN(N\u22121).\nThis function is equivalent to scipy.spatial.distance.pdist(input,\n\
  'minkowski', p=p) if p\u2208(0,\u221E)p \\in (0, \\infty)p\u2208(0,\u221E). When\
  \ p=0p = 0p=0 it is\nequivalent to scipy.spatial.distance.pdist(input, 'hamming')\
  \ * M.\nWhen p=\u221Ep = \\inftyp=\u221E, the closest scipy function is\nscipy.spatial.distance.pdist(xn,\
  \ lambda x, y: np.abs(x - y).max()).\n\nParameters\n\ninput \u2013 input tensor\
  \ of shape N\xD7MN \\times MN\xD7M.\np \u2013 p value for the p-norm distance to\
  \ calculate between each vector pair\n\u2208[0,\u221E]\\in [0, \\infty]\u2208[0,\u221E\
  ].\n\n\n\n"
