api: torch.fft.irfft2
doc: "\n\ntorch.fft.irfft2(input, s=None, dim=(-2, -1), norm=None, *, out=None) \u2192\
  \ Tensor\xB6\nComputes the inverse of rfft2().\nEquivalent to irfftn() but IFFTs\
  \ only the last two dimensions by default.\ninput is interpreted as a one-sided\
  \ Hermitian signal in the Fourier\ndomain, as produced by rfft2(). By the Hermitian\
  \ property, the\noutput will be real-valued.\n\nNote\nSome input frequencies must\
  \ be real-valued to satisfy the Hermitian\nproperty. In these cases the imaginary\
  \ component will be ignored.\nFor example, any imaginary component in the zero-frequency\
  \ term cannot\nbe represented in a real output and so will always be ignored.\n\n\
  \nNote\nThe correct interpretation of the Hermitian input depends on the length\
  \ of\nthe original data, as given by s. This is because each input shape\ncould\
  \ correspond to either an odd or even length signal. By default, the\nsignal is\
  \ assumed to be even length and odd signals will not round-trip\nproperly. So, it\
  \ is recommended to always pass the signal shape s.\n\n\nNote\nSupports torch.half\
  \ and torch.chalf on CUDA with GPU Architecture SM53 or greater.\nHowever it only\
  \ supports powers of 2 signal length in every transformed dimensions.\nWith default\
  \ arguments, the size of last dimension should be (2^n + 1) as argument\ns defaults\
  \ to even output size = 2 * (last_dim_size - 1)\n\n\nParameters\n\ninput (Tensor)\
  \ \u2013 the input tensor\ns (Tuple[int], optional) \u2013 Signal size in the transformed\
  \ dimensions.\nIf given, each dimension dim[i] will either be zero-padded or\ntrimmed\
  \ to the length s[i] before computing the real FFT.\nIf a length -1 is specified,\
  \ no padding is done in that dimension.\nDefaults to even output in the last dimension:\n\
  s[-1] = 2*(input.size(dim[-1]) - 1).\ndim (Tuple[int], optional) \u2013 Dimensions\
  \ to be transformed.\nThe last dimension must be the half-Hermitian compressed dimension.\n\
  Default: last two dimensions.\nnorm (str, optional) \u2013 Normalization mode. For\
  \ the backward transform\n(irfft2()), these correspond to:\n\n\"forward\" - no normalization\n\
  \"backward\" - normalize by 1/n\n\"ortho\" - normalize by 1/sqrt(n) (making the\
  \ real IFFT orthonormal)\n\nWhere n = prod(s) is the logical IFFT size.\nCalling\
  \ the forward transform (rfft2()) with the same\nnormalization mode will apply an\
  \ overall normalization of 1/n between\nthe two transforms. This is required to\
  \ make irfft2()\nthe exact inverse.\nDefault is \"backward\" (normalize by 1/n).\n\
  \n\n\nKeyword Arguments\nout (Tensor, optional) \u2013 the output tensor.\n\n\n\
  Example\n>>> t = torch.rand(10, 9)\n>>> T = torch.fft.rfft2(t)\n\n\nWithout specifying\
  \ the output length to irfft2(), the output\nwill not round-trip properly because\
  \ the input is odd-length in the last\ndimension:\n>>> torch.fft.irfft2(T).size()\n\
  torch.Size([10, 8])\n\n\nSo, it is recommended to always pass the signal shape s.\n\
  >>> roundtrip = torch.fft.irfft2(T, t.size())\n>>> roundtrip.size()\ntorch.Size([10,\
  \ 9])\n>>> torch.testing.assert_close(roundtrip, t, check_stride=False)\n\n\n"
