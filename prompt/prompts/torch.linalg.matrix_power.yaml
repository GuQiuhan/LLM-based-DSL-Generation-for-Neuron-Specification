api: torch.linalg.matrix_power
doc: "\n\ntorch.linalg.matrix_power(A, n, *, out=None) \u2192 Tensor\xB6\nComputes\
  \ the n-th power of a square matrix for an integer n.\nSupports input of float,\
  \ double, cfloat and cdouble dtypes.\nAlso supports batches of matrices, and if\
  \ A is a batch of matrices then\nthe output has the same batch dimensions.\nIf n=\
  \ 0, it returns the identity matrix (or batch) of the same shape\nas A. If n is\
  \ negative, it returns the inverse of each matrix\n(if invertible) raised to the\
  \ power of abs(n).\n\nNote\nConsider using torch.linalg.solve() if possible for\
  \ multiplying a matrix on the left by\na negative power as, if n> 0:\ntorch.linalg.solve(matrix_power(A,\
  \ n), B) == matrix_power(A, -n)  @ B\n\n\nIt is always preferred to use solve()\
  \ when possible, as it is faster and more\nnumerically stable than computing A\u2212\
  nA^{-n}A\u2212n explicitly.\n\n\nSee also\ntorch.linalg.solve() computes A.inverse()\
  \ @ B with a\nnumerically stable algorithm.\n\n\nParameters\n\nA (Tensor) \u2013\
  \ tensor of shape (*, m, m) where * is zero or more batch dimensions.\nn (int) \u2013\
  \ the exponent.\n\n\nKeyword Arguments\nout (Tensor, optional) \u2013 output tensor.\
  \ Ignored if None. Default: None.\n\nRaises\nRuntimeError \u2013 if n< 0 and the\
  \ matrix A or any matrix in the\n    batch of matrices A is not invertible.\n\n\n\
  Examples:\n>>> A = torch.randn(3, 3)\n>>> torch.linalg.matrix_power(A, 0)\ntensor([[1.,\
  \ 0., 0.],\n        [0., 1., 0.],\n        [0., 0., 1.]])\n>>> torch.linalg.matrix_power(A,\
  \ 3)\ntensor([[ 1.0756,  0.4980,  0.0100],\n        [-1.6617,  1.4994, -1.9980],\n\
  \        [-0.4509,  0.2731,  0.8001]])\n>>> torch.linalg.matrix_power(A.expand(2,\
  \ -1, -1), -2)\ntensor([[[ 0.2640,  0.4571, -0.5511],\n        [-1.0163,  0.3491,\
  \ -1.5292],\n        [-0.4899,  0.0822,  0.2773]],\n        [[ 0.2640,  0.4571,\
  \ -0.5511],\n        [-1.0163,  0.3491, -1.5292],\n        [-0.4899,  0.0822,  0.2773]]])\n\
  \n\n"
