api: torch.linalg.multi_dot
doc: "\n\ntorch.linalg.multi_dot(tensors, *, out=None)\xB6\nEfficiently multiplies\
  \ two or more matrices by reordering the multiplications so that\nthe fewest arithmetic\
  \ operations are performed.\nSupports inputs of float, double, cfloat and cdouble\
  \ dtypes.\nThis function does not support batched inputs.\nEvery tensor in tensors\
  \ must be 2D, except for the first and last which\nmay be 1D. If the first tensor\
  \ is a 1D vector of shape (n,) it is treated as a row vector\nof shape (1, n), similarly\
  \ if the last tensor is a 1D vector of shape (n,) it is treated\nas a column vector\
  \ of shape (n, 1).\nIf the first and last tensors are matrices, the output will\
  \ be a matrix.\nHowever, if either is a 1D vector, then the output will be a 1D\
  \ vector.\nDifferences with numpy.linalg.multi_dot:\n\nUnlike numpy.linalg.multi_dot,\
  \ the first and last tensors must either be 1D or 2D\nwhereas NumPy allows them\
  \ to be nD\n\n\nWarning\nThis function does not broadcast.\n\n\nNote\nThis function\
  \ is implemented by chaining torch.mm() calls after\ncomputing the optimal matrix\
  \ multiplication order.\n\n\nNote\nThe cost of multiplying two matrices with shapes\
  \ (a, b) and (b, c) is\na * b * c. Given matrices A, B, C with shapes (10, 100),\n\
  (100, 5), (5, 50) respectively, we can calculate the cost of different\nmultiplication\
  \ orders as follows:\n\ncost\u2061((AB)C)=10\xD7100\xD75+10\xD75\xD750=7500cost\u2061\
  (A(BC))=10\xD7100\xD750+100\xD75\xD750=75000\\begin{align*}\n\\operatorname{cost}((AB)C)\
  \ &= 10 \\times 100 \\times 5 + 10 \\times 5 \\times 50 = 7500 \\\\\n\\operatorname{cost}(A(BC))\
  \ &= 10 \\times 100 \\times 50 + 100 \\times 5 \\times 50 = 75000\n\\end{align*}cost((AB)C)cost(A(BC))\u200B\
  =10\xD7100\xD75+10\xD75\xD750=7500=10\xD7100\xD750+100\xD75\xD750=75000\u200BIn\
  \ this case, multiplying A and B first followed by C is 10 times faster.\n\n\nParameters\n\
  tensors (Sequence[Tensor]) \u2013 two or more tensors to multiply. The first and\
  \ last\ntensors may be 1D or 2D. Every other tensor must be 2D.\n\nKeyword Arguments\n\
  out (Tensor, optional) \u2013 output tensor. Ignored if None. Default: None.\n\n\
  \nExamples:\n>>> from torch.linalg import multi_dot\n\n>>> multi_dot([torch.tensor([1,\
  \ 2]), torch.tensor([2, 3])])\ntensor(8)\n>>> multi_dot([torch.tensor([[1, 2]]),\
  \ torch.tensor([2, 3])])\ntensor([8])\n>>> multi_dot([torch.tensor([[1, 2]]), torch.tensor([[2],\
  \ [3]])])\ntensor([[8]])\n\n>>> A = torch.arange(2 * 3).view(2, 3)\n>>> B = torch.arange(3\
  \ * 2).view(3, 2)\n>>> C = torch.arange(2 * 2).view(2, 2)\n>>> multi_dot((A, B,\
  \ C))\ntensor([[ 26,  49],\n        [ 80, 148]])\n\n\n"
