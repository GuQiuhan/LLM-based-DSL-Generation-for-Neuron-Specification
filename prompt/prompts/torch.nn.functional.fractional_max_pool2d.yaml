api: torch.nn.functional.fractional_max_pool2d
doc: "\n\ntorch.nn.functional.fractional_max_pool2d(input, kernel_size, output_size=None,\
  \ output_ratio=None, return_indices=False, _random_samples=None)\xB6\nApplies 2D\
  \ fractional max pooling over an input signal composed of several input planes.\n\
  Fractional MaxPooling is described in detail in the paper Fractional MaxPooling\
  \ by Ben Graham\nThe max-pooling operation is applied in kH\xD7kWkH \\times kWkH\xD7\
  kW regions by a stochastic\nstep size determined by the target output size.\nThe\
  \ number of output features is equal to the number of input planes.\n\nParameters\n\
  \nkernel_size \u2013 the size of the window to take a max over.\nCan be a single\
  \ number kkk (for a square kernel of k\xD7kk \\times kk\xD7k)\nor a tuple (kH, kW)\n\
  output_size \u2013 the target output size of the image of the form oH\xD7oWoH \\\
  times oWoH\xD7oW.\nCan be a tuple (oH, oW) or a single number oHoHoH for a square\
  \ image oH\xD7oHoH \\times oHoH\xD7oH\noutput_ratio \u2013 If one wants to have\
  \ an output size as a ratio of the input size, this option can be given.\nThis has\
  \ to be a number or tuple in the range (0, 1)\nreturn_indices \u2013 if True, will\
  \ return the indices along with the outputs.\nUseful to pass to max_unpool2d().\n\
  \n\n\n\nExamples::>>> input = torch.randn(20, 16, 50, 32)\n>>> # pool of square\
  \ window of size=3, and target output size 13x12\n>>> F.fractional_max_pool2d(input,\
  \ 3, output_size=(13, 12))\n>>> # pool of square window and target output size being\
  \ half of input image size\n>>> F.fractional_max_pool2d(input, 3, output_ratio=(0.5,\
  \ 0.5))\n\n\n\n\n"
