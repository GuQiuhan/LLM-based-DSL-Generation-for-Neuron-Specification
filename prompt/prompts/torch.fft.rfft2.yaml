api: torch.fft.rfft2
doc: "\n\ntorch.fft.rfft2(input, s=None, dim=(-2, -1), norm=None, *, out=None) \u2192\
  \ Tensor\xB6\nComputes the 2-dimensional discrete Fourier transform of real input.\n\
  Equivalent to rfftn() but FFTs only the last two dimensions by default.\nThe FFT\
  \ of a real signal is Hermitian-symmetric, X[i, j] = conj(X[-i, -j]),\nso the full\
  \ fft2() output contains redundant information.\nrfft2() instead omits the negative\
  \ frequencies in the last\ndimension.\n\nNote\nSupports torch.half on CUDA with\
  \ GPU Architecture SM53 or greater.\nHowever it only supports powers of 2 signal\
  \ length in every transformed dimensions.\n\n\nParameters\n\ninput (Tensor) \u2013\
  \ the input tensor\ns (Tuple[int], optional) \u2013 Signal size in the transformed\
  \ dimensions.\nIf given, each dimension dim[i] will either be zero-padded or\ntrimmed\
  \ to the length s[i] before computing the real FFT.\nIf a length -1 is specified,\
  \ no padding is done in that dimension.\nDefault: s = [input.size(d) for d in dim]\n\
  dim (Tuple[int], optional) \u2013 Dimensions to be transformed.\nDefault: last two\
  \ dimensions.\nnorm (str, optional) \u2013 Normalization mode. For the forward transform\n\
  (rfft2()), these correspond to:\n\n\"forward\" - normalize by 1/n\n\"backward\"\
  \ - no normalization\n\"ortho\" - normalize by 1/sqrt(n) (making the real FFT orthonormal)\n\
  \nWhere n = prod(s) is the logical FFT size.\nCalling the backward transform (irfft2())\
  \ with the same\nnormalization mode will apply an overall normalization of 1/n between\n\
  the two transforms. This is required to make irfft2()\nthe exact inverse.\nDefault\
  \ is \"backward\" (no normalization).\n\n\n\nKeyword Arguments\nout (Tensor, optional)\
  \ \u2013 the output tensor.\n\n\nExample\n>>> t = torch.rand(10, 10)\n>>> rfft2\
  \ = torch.fft.rfft2(t)\n>>> rfft2.size()\ntorch.Size([10, 6])\n\n\nCompared against\
  \ the full output from fft2(), we have all\nelements up to the Nyquist frequency.\n\
  >>> fft2 = torch.fft.fft2(t)\n>>> torch.testing.assert_close(fft2[..., :6], rfft2,\
  \ check_stride=False)\n\n\nThe discrete Fourier transform is separable, so rfft2()\n\
  here is equivalent to a combination of fft() and\nrfft():\n>>> two_ffts = torch.fft.fft(torch.fft.rfft(t,\
  \ dim=1), dim=0)\n>>> torch.testing.assert_close(rfft2, two_ffts, check_stride=False)\n\
  \n\n"
