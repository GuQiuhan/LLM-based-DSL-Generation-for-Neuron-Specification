api: torch.linalg.cholesky_ex
doc: "\n\ntorch.linalg.cholesky_ex(A, *, upper=False, check_errors=False, out=None)\xB6\
  \nComputes the Cholesky decomposition of a complex Hermitian or real\nsymmetric\
  \ positive-definite matrix.\nThis function skips the (slow) error checking and error\
  \ message construction\nof torch.linalg.cholesky(), instead directly returning the\
  \ LAPACK\nerror codes as part of a named tuple (L, info). This makes this function\n\
  a faster way to check if a matrix is positive-definite, and it provides an\nopportunity\
  \ to handle decomposition errors more gracefully or performantly\nthan torch.linalg.cholesky()\
  \ does.\nSupports input of float, double, cfloat and cdouble dtypes.\nAlso supports\
  \ batches of matrices, and if A is a batch of matrices then\nthe output has the\
  \ same batch dimensions.\nIf A is not a Hermitian positive-definite matrix, or if\
  \ it\u2019s a batch of matrices\nand one or more of them is not a Hermitian positive-definite\
  \ matrix,\nthen info stores a positive integer for the corresponding matrix.\nThe\
  \ positive integer indicates the order of the leading minor that is not positive-definite,\n\
  and the decomposition could not be completed.\ninfo filled with zeros indicates\
  \ that the decomposition was successful.\nIf check_errors=True and info contains\
  \ positive integers, then a RuntimeError is thrown.\n\nNote\nWhen the inputs are\
  \ on a CUDA device, this function synchronizes only when check_errors= True.\n\n\
  \nWarning\nThis function is \u201Cexperimental\u201D and it may change in a future\
  \ PyTorch release.\n\n\nSee also\ntorch.linalg.cholesky() is a NumPy compatible\
  \ variant that always checks for errors.\n\n\nParameters\nA (Tensor) \u2013 the\
  \ Hermitian n times n matrix or the batch of such matrices of size\n(*, n, n) where\
  \ * is one or more batch dimensions.\n\nKeyword Arguments\n\nupper (bool, optional)\
  \ \u2013 whether to return an upper triangular matrix.\nThe tensor returned with\
  \ upper=True is the conjugate transpose of the tensor\nreturned with upper=False.\n\
  check_errors (bool, optional) \u2013 controls whether to check the content of infos.\
  \ Default: False.\nout (tuple, optional) \u2013 tuple of two tensors to write the\
  \ output to. Ignored if None. Default: None.\n\n\n\nExamples:\n>>> A = torch.randn(2,\
  \ 2, dtype=torch.complex128)\n>>> A = A @ A.t().conj()  # creates a Hermitian positive-definite\
  \ matrix\n>>> L, info = torch.linalg.cholesky_ex(A)\n>>> A\ntensor([[ 2.3792+0.0000j,\
  \ -0.9023+0.9831j],\n        [-0.9023-0.9831j,  0.8757+0.0000j]], dtype=torch.complex128)\n\
  >>> L\ntensor([[ 1.5425+0.0000j,  0.0000+0.0000j],\n        [-0.5850-0.6374j,  0.3567+0.0000j]],\
  \ dtype=torch.complex128)\n>>> info\ntensor(0, dtype=torch.int32)\n\n\n"
