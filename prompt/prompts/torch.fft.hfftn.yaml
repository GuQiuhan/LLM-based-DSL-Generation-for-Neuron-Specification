api: torch.fft.hfftn
doc: "\n\ntorch.fft.hfftn(input, s=None, dim=None, norm=None, *, out=None) \u2192\
  \ Tensor\xB6\nComputes the n-dimensional discrete Fourier transform of a Hermitian\
  \ symmetric\ninput signal.\ninput is interpreted as a one-sided Hermitian signal\
  \ in the time\ndomain. By the Hermitian property, the Fourier transform will be\
  \ real-valued.\n\nNote\nhfftn()/ihfftn() are analogous to\nrfftn()/irfftn(). The\
  \ real FFT expects\na real signal in the time-domain and gives Hermitian symmetry\
  \ in the\nfrequency-domain. The Hermitian FFT is the opposite; Hermitian symmetric\
  \ in\nthe time-domain and real-valued in the frequency-domain. For this reason,\n\
  special care needs to be taken with the shape argument s, in the\nsame way as with\
  \ irfftn().\n\n\nNote\nSome input frequencies must be real-valued to satisfy the\
  \ Hermitian\nproperty. In these cases the imaginary component will be ignored.\n\
  For example, any imaginary component in the zero-frequency term cannot\nbe represented\
  \ in a real output and so will always be ignored.\n\n\nNote\nThe correct interpretation\
  \ of the Hermitian input depends on the length of\nthe original data, as given by\
  \ s. This is because each input shape\ncould correspond to either an odd or even\
  \ length signal. By default, the\nsignal is assumed to be even length and odd signals\
  \ will not round-trip\nproperly. It is recommended to always pass the signal shape\
  \ s.\n\n\nNote\nSupports torch.half and torch.chalf on CUDA with GPU Architecture\
  \ SM53 or greater.\nHowever it only supports powers of 2 signal length in every\
  \ transformed dimensions.\nWith default arguments, the size of last dimension should\
  \ be (2^n + 1) as argument\ns defaults to even output size = 2 * (last_dim_size\
  \ - 1)\n\n\nParameters\n\ninput (Tensor) \u2013 the input tensor\ns (Tuple[int],\
  \ optional) \u2013 Signal size in the transformed dimensions.\nIf given, each dimension\
  \ dim[i] will either be zero-padded or\ntrimmed to the length s[i] before computing\
  \ the real FFT.\nIf a length -1 is specified, no padding is done in that dimension.\n\
  Defaults to even output in the last dimension:\ns[-1] = 2*(input.size(dim[-1]) -\
  \ 1).\ndim (Tuple[int], optional) \u2013 Dimensions to be transformed.\nThe last\
  \ dimension must be the half-Hermitian compressed dimension.\nDefault: all dimensions,\
  \ or the last len(s) dimensions if s is given.\nnorm (str, optional) \u2013 Normalization\
  \ mode. For the forward transform\n(hfftn()), these correspond to:\n\n\"forward\"\
  \ - normalize by 1/n\n\"backward\" - no normalization\n\"ortho\" - normalize by\
  \ 1/sqrt(n) (making the Hermitian FFT orthonormal)\n\nWhere n = prod(s) is the logical\
  \ FFT size.\nCalling the backward transform (ihfftn()) with the same\nnormalization\
  \ mode will apply an overall normalization of 1/n between\nthe two transforms. This\
  \ is required to make ihfftn()\nthe exact inverse.\nDefault is \"backward\" (no\
  \ normalization).\n\n\n\nKeyword Arguments\nout (Tensor, optional) \u2013 the output\
  \ tensor.\n\n\nExample\nStarting from a real frequency-space signal, we can generate\
  \ a\nHermitian-symmetric time-domain signal:\n>>> T = torch.rand(10, 9)\n>>> t =\
  \ torch.fft.ihfftn(T)\nWithout specifying the output length to hfftn(), the\noutput\
  \ will not round-trip properly because the input is odd-length in the\nlast dimension:\n\
  >>> torch.fft.hfftn(t).size()\ntorch.Size([10, 10])\n\n\nSo, it is recommended to\
  \ always pass the signal shape s.\n>>> roundtrip = torch.fft.hfftn(t, T.size())\n\
  >>> roundtrip.size()\ntorch.Size([10, 9])\n>>> torch.allclose(roundtrip, T)\nTrue\n\
  \n\n"
