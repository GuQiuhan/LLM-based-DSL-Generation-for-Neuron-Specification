api: torch.signal.windows.kaiser
doc: "\n\ntorch.signal.windows.kaiser(M, *, beta=12.0, sym=True, dtype=None, layout=torch.strided,\
  \ device=None, requires_grad=False)[source]\xB6\nComputes the Kaiser window.\nThe\
  \ Kaiser window is defined as follows:\n\nwn=I0(\u03B21\u2212(n\u2212N/2N/2)2)/I0(\u03B2\
  )w_n = I_0 \\left( \\beta \\sqrt{1 - \\left( {\\frac{n - N/2}{N/2}} \\right) ^2\
  \ } \\right) / I_0( \\beta )\n\nwn\u200B=I0\u200B\u200B\u03B21\u2212(N/2n\u2212\
  N/2\u200B)2\u200B\u200B/I0\u200B(\u03B2)where I_0 is the zeroth order modified Bessel\
  \ function of the first kind (see torch.special.i0()), and\nN = M - 1 if sym else\
  \ M.\nThe window is normalized to 1 (maximum value is 1). However, the 1 doesn\u2019\
  t appear if M is even and sym is True.\n\nParameters\nM (int) \u2013 the length\
  \ of the window.\nIn other words, the number of points of the returned window.\n\
  \nKeyword Arguments\n\nbeta (float, optional) \u2013 shape parameter for the window.\
  \ Must be non-negative. Default: 12.0\nsym (bool, optional) \u2013 If False, returns\
  \ a periodic window suitable for use in spectral analysis.\nIf True, returns a symmetric\
  \ window suitable for use in filter design. Default: True.\ndtype (torch.dtype,\
  \ optional) \u2013 the desired data type of returned tensor.\nDefault: if None,\
  \ uses a global default (see torch.set_default_dtype()).\nlayout (torch.layout,\
  \ optional) \u2013 the desired layout of returned Tensor.\nDefault: torch.strided.\n\
  device (torch.device, optional) \u2013 the desired device of returned tensor.\n\
  Default: if None, uses the current device for the default tensor type\n(see torch.set_default_device()).\
  \ device will be the CPU\nfor CPU tensor types and the current CUDA device for CUDA\
  \ tensor types.\nrequires_grad (bool, optional) \u2013 If autograd should record\
  \ operations on the\nreturned tensor. Default: False.\n\n\nReturn type\nTensor\n\
  \n\nExamples:\n>>> # Generates a symmetric gaussian window with a standard deviation\
  \ of 1.0.\n>>> torch.signal.windows.kaiser(5)\ntensor([4.0065e-05, 2.1875e-03, 4.3937e-02,\
  \ 3.2465e-01, 8.8250e-01, 8.8250e-01, 3.2465e-01, 4.3937e-02, 2.1875e-03, 4.0065e-05])\n\
  >>> # Generates a periodic gaussian window and standard deviation equal to 0.9.\n\
  >>> torch.signal.windows.kaiser(5, sym=False,std=0.9)\ntensor([1.9858e-07, 5.1365e-05,\
  \ 3.8659e-03, 8.4658e-02, 5.3941e-01, 1.0000e+00, 5.3941e-01, 8.4658e-02, 3.8659e-03,\
  \ 5.1365e-05])\n\n\n"
