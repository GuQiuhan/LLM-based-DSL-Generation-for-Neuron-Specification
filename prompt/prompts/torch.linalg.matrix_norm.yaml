api: torch.linalg.matrix_norm
doc: "\n\ntorch.linalg.matrix_norm(A, ord='fro', dim=(-2, -1), keepdim=False, *, dtype=None,\
  \ out=None) \u2192 Tensor\xB6\nComputes a matrix norm.\nIf A is complex valued,\
  \ it computes the norm of A.abs()\nSupport input of float, double, cfloat and cdouble\
  \ dtypes.\nAlso supports batches of matrices: the norm will be computed over the\n\
  dimensions specified by the 2-tuple dim and the other dimensions will\nbe treated\
  \ as batch dimensions. The output will have the same batch dimensions.\nord defines\
  \ the matrix norm that is computed. The following norms are supported:\n\n\nord\n\
  matrix norm\n\n\n\n\u2018fro\u2019 (default)\nFrobenius norm\n\n\u2018nuc\u2019\n\
  nuclear norm\n\ninf\nmax(sum(abs(x), dim=1))\n\n-inf\nmin(sum(abs(x), dim=1))\n\n\
  1\nmax(sum(abs(x), dim=0))\n\n-1\nmin(sum(abs(x), dim=0))\n\n2\nlargest singular\
  \ value\n\n-2\nsmallest singular value\n\n\n\nwhere inf refers to float(\u2018inf\u2019\
  ), NumPy\u2019s inf object, or any equivalent object.\n\nParameters\n\nA (Tensor)\
  \ \u2013 tensor with two or more dimensions. By default its\nshape is interpreted\
  \ as (*, m, n) where * is zero or more\nbatch dimensions, but this behavior can\
  \ be controlled using dim.\nord (int, inf, -inf, 'fro', 'nuc', optional) \u2013\
  \ order of norm. Default: \u2018fro\u2019\ndim (Tuple[int, int], optional) \u2013\
  \ dimensions over which to compute the norm. Default: (-2, -1)\nkeepdim (bool, optional)\
  \ \u2013 If set to True, the reduced dimensions are retained\nin the result as dimensions\
  \ with size one. Default: False\n\n\nKeyword Arguments\n\nout (Tensor, optional)\
  \ \u2013 output tensor. Ignored if None. Default: None.\ndtype (torch.dtype, optional)\
  \ \u2013 If specified, the input tensor is cast to\ndtype before performing the\
  \ operation, and the returned tensor\u2019s type\nwill be dtype. Default: None\n\
  \n\nReturns\nA real-valued tensor, even when A is complex.\n\n\nExamples:\n>>> from\
  \ torch import linalg as LA\n>>> A = torch.arange(9, dtype=torch.float).reshape(3,\
  \ 3)\n>>> A\ntensor([[0., 1., 2.],\n        [3., 4., 5.],\n        [6., 7., 8.]])\n\
  >>> LA.matrix_norm(A)\ntensor(14.2829)\n>>> LA.matrix_norm(A, ord=-1)\ntensor(9.)\n\
  >>> B = A.expand(2, -1, -1)\n>>> B\ntensor([[[0., 1., 2.],\n        [3., 4., 5.],\n\
  \        [6., 7., 8.]],\n\n        [[0., 1., 2.],\n        [3., 4., 5.],\n     \
  \   [6., 7., 8.]]])\n>>> LA.matrix_norm(B)\ntensor([14.2829, 14.2829])\n>>> LA.matrix_norm(B,\
  \ dim=(0, 2))\ntensor([ 3.1623, 10.0000, 17.2627])\n\n\n"
