api: torch.linalg.cholesky
doc: "\n\ntorch.linalg.cholesky(A, *, upper=False, out=None) \u2192 Tensor\xB6\nComputes\
  \ the Cholesky decomposition of a complex Hermitian or real symmetric positive-definite\
  \ matrix.\nLetting K\\mathbb{K}K be R\\mathbb{R}R or C\\mathbb{C}C,\nthe Cholesky\
  \ decomposition of a complex Hermitian or real symmetric positive-definite matrix\n\
  A\u2208Kn\xD7nA \\in \\mathbb{K}^{n \\times n}A\u2208Kn\xD7n is defined as\n\nA=LLHL\u2208\
  Kn\xD7nA = LL^{\\text{H}}\\mathrlap{\\qquad L \\in \\mathbb{K}^{n \\times n}}A=LLHL\u2208\
  Kn\xD7nwhere LLL is a lower triangular matrix with real positive diagonal (even\
  \ in the complex case) and\nLHL^{\\text{H}}LH is the conjugate transpose when LLL\
  \ is complex, and the transpose when LLL is real-valued.\nSupports input of float,\
  \ double, cfloat and cdouble dtypes.\nAlso supports batches of matrices, and if\
  \ A is a batch of matrices then\nthe output has the same batch dimensions.\n\nNote\n\
  When inputs are on a CUDA device, this function synchronizes that device with the\
  \ CPU. For a version of this function that does not synchronize, see torch.linalg.cholesky_ex().\n\
  \n\nSee also\ntorch.linalg.cholesky_ex() for a version of this operation that\n\
  skips the (slow) error checking by default and instead returns the debug\ninformation.\
  \ This makes it a faster way to check if a matrix is\npositive-definite.\ntorch.linalg.eigh()\
  \ for a different decomposition of a Hermitian matrix.\nThe eigenvalue decomposition\
  \ gives more information about the matrix but it\nslower to compute than the Cholesky\
  \ decomposition.\n\n\nParameters\nA (Tensor) \u2013 tensor of shape (*, n, n) where\
  \ * is zero or more batch dimensions\nconsisting of symmetric or Hermitian positive-definite\
  \ matrices.\n\nKeyword Arguments\n\nupper (bool, optional) \u2013 whether to return\
  \ an upper triangular matrix.\nThe tensor returned with upper=True is the conjugate\
  \ transpose of the tensor\nreturned with upper=False.\nout (Tensor, optional) \u2013\
  \ output tensor. Ignored if None. Default: None.\n\n\nRaises\nRuntimeError \u2013\
  \ if the A matrix or any matrix in a batched A is not Hermitian\n    (resp. symmetric)\
  \ positive-definite. If A is a batch of matrices,\n    the error message will include\
  \ the batch index of the first matrix that fails\n    to meet this condition.\n\n\
  \nExamples:\n>>> A = torch.randn(2, 2, dtype=torch.complex128)\n>>> A = A @ A.T.conj()\
  \ + torch.eye(2) # creates a Hermitian positive-definite matrix\n>>> A\ntensor([[2.5266+0.0000j,\
  \ 1.9586-2.0626j],\n        [1.9586+2.0626j, 9.4160+0.0000j]], dtype=torch.complex128)\n\
  >>> L = torch.linalg.cholesky(A)\n>>> L\ntensor([[1.5895+0.0000j, 0.0000+0.0000j],\n\
  \        [1.2322+1.2976j, 2.4928+0.0000j]], dtype=torch.complex128)\n>>> torch.dist(L\
  \ @ L.T.conj(), A)\ntensor(4.4692e-16, dtype=torch.float64)\n\n>>> A = torch.randn(3,\
  \ 2, 2, dtype=torch.float64)\n>>> A = A @ A.mT + torch.eye(2)  # batch of symmetric\
  \ positive-definite matrices\n>>> L = torch.linalg.cholesky(A)\n>>> torch.dist(L\
  \ @ L.mT, A)\ntensor(5.8747e-16, dtype=torch.float64)\n\n\n"
