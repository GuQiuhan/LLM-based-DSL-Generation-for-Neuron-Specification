api: torch.fft.ifft
doc: "\n\ntorch.fft.ifft(input, n=None, dim=-1, norm=None, *, out=None) \u2192 Tensor\xB6\
  \nComputes the one dimensional inverse discrete Fourier transform of input.\n\n\
  Note\nSupports torch.half and torch.chalf on CUDA with GPU Architecture SM53 or\
  \ greater.\nHowever it only supports powers of 2 signal length in every transformed\
  \ dimension.\n\n\nParameters\n\ninput (Tensor) \u2013 the input tensor\nn (int,\
  \ optional) \u2013 Signal length. If given, the input will either be zero-padded\n\
  or trimmed to this length before computing the IFFT.\ndim (int, optional) \u2013\
  \ The dimension along which to take the one dimensional IFFT.\nnorm (str, optional)\
  \ \u2013 Normalization mode. For the backward transform\n(ifft()), these correspond\
  \ to:\n\n\"forward\" - no normalization\n\"backward\" - normalize by 1/n\n\"ortho\"\
  \ - normalize by 1/sqrt(n) (making the IFFT orthonormal)\n\nCalling the forward\
  \ transform (fft()) with the same\nnormalization mode will apply an overall normalization\
  \ of 1/n between\nthe two transforms. This is required to make ifft()\nthe exact\
  \ inverse.\nDefault is \"backward\" (normalize by 1/n).\n\n\n\nKeyword Arguments\n\
  out (Tensor, optional) \u2013 the output tensor.\n\n\nExample\n>>> t = torch.tensor([\
  \ 6.+0.j, -2.+2.j, -2.+0.j, -2.-2.j])\n>>> torch.fft.ifft(t)\ntensor([0.+0.j, 1.+0.j,\
  \ 2.+0.j, 3.+0.j])\n\n\n"
