api: torch.linalg.pinv
doc: "\n\ntorch.linalg.pinv(A, *, atol=None, rtol=None, hermitian=False, out=None)\
  \ \u2192 Tensor\xB6\nComputes the pseudoinverse (Moore-Penrose inverse) of a matrix.\n\
  The pseudoinverse may be defined algebraically\nbut it is more computationally convenient\
  \ to understand it through the SVD\nSupports input of float, double, cfloat and\
  \ cdouble dtypes.\nAlso supports batches of matrices, and if A is a batch of matrices\
  \ then\nthe output has the same batch dimensions.\nIf hermitian= True, A is assumed\
  \ to be Hermitian if complex or\nsymmetric if real, but this is not checked internally.\
  \ Instead, just the lower\ntriangular part of the matrix is used in the computations.\n\
  The singular values (or the norm of the eigenvalues when hermitian= True)\nthat\
  \ are below max\u2061(atol,\u03C31\u22C5rtol)\\max(\\text{atol}, \\sigma_1 \\cdot\
  \ \\text{rtol})max(atol,\u03C31\u200B\u22C5rtol) threshold are\ntreated as zero\
  \ and discarded in the computation,\nwhere \u03C31\\sigma_1\u03C31\u200B is the\
  \ largest singular value (or eigenvalue).\nIf rtol is not specified and A is a matrix\
  \ of dimensions (m, n),\nthe relative tolerance is set to be rtol=max\u2061(m,n)\u03B5\
  \\text{rtol} = \\max(m, n) \\varepsilonrtol=max(m,n)\u03B5\nand \u03B5\\varepsilon\u03B5\
  \ is the epsilon value for the dtype of A (see finfo).\nIf rtol is not specified\
  \ and atol is specified to be larger than zero then\nrtol is set to zero.\nIf atol\
  \ or rtol is a torch.Tensor, its shape must be broadcastable to that\nof the singular\
  \ values of A as returned by torch.linalg.svd().\n\nNote\nThis function uses torch.linalg.svd()\
  \ if hermitian= False and\ntorch.linalg.eigh() if hermitian= True.\nFor CUDA inputs,\
  \ this function synchronizes that device with the CPU.\n\n\nNote\nConsider using\
  \ torch.linalg.lstsq() if possible for multiplying a matrix on the left by\nthe\
  \ pseudoinverse, as:\ntorch.linalg.lstsq(A, B).solution == A.pinv() @ B\n\n\nIt\
  \ is always preferred to use lstsq() when possible, as it is faster and more\nnumerically\
  \ stable than computing the pseudoinverse explicitly.\n\n\nNote\nThis function has\
  \ NumPy compatible variant linalg.pinv(A, rcond, hermitian=False).\nHowever, use\
  \ of the positional argument rcond is deprecated in favor of rtol.\n\n\nWarning\n\
  This function uses internally torch.linalg.svd() (or torch.linalg.eigh()\nwhen hermitian=\
  \ True), so its derivative has the same problems as those of these\nfunctions. See\
  \ the warnings in torch.linalg.svd() and torch.linalg.eigh() for\nmore details.\n\
  \n\nSee also\ntorch.linalg.inv() computes the inverse of a square matrix.\ntorch.linalg.lstsq()\
  \ computes A.pinv() @ B with a\nnumerically stable algorithm.\n\n\nParameters\n\n\
  A (Tensor) \u2013 tensor of shape (*, m, n) where * is zero or more batch dimensions.\n\
  rcond (float, Tensor, optional) \u2013 [NumPy Compat]. Alias for rtol. Default:\
  \ None.\n\n\nKeyword Arguments\n\natol (float, Tensor, optional) \u2013 the absolute\
  \ tolerance value. When None it\u2019s considered to be zero.\nDefault: None.\n\
  rtol (float, Tensor, optional) \u2013 the relative tolerance value. See above for\
  \ the value it takes when None.\nDefault: None.\nhermitian (bool, optional) \u2013\
  \ indicates whether A is Hermitian if complex\nor symmetric if real. Default: False.\n\
  out (Tensor, optional) \u2013 output tensor. Ignored if None. Default: None.\n\n\
  \n\nExamples:\n>>> A = torch.randn(3, 5)\n>>> A\ntensor([[ 0.5495,  0.0979, -1.4092,\
  \ -0.1128,  0.4132],\n        [-1.1143, -0.3662,  0.3042,  1.6374, -0.9294],\n \
  \       [-0.3269, -0.5745, -0.0382, -0.5922, -0.6759]])\n>>> torch.linalg.pinv(A)\n\
  tensor([[ 0.0600, -0.1933, -0.2090],\n        [-0.0903, -0.0817, -0.4752],\n   \
  \     [-0.7124, -0.1631, -0.2272],\n        [ 0.1356,  0.3933, -0.5023],\n     \
  \   [-0.0308, -0.1725, -0.5216]])\n\n>>> A = torch.randn(2, 6, 3)\n>>> Apinv = torch.linalg.pinv(A)\n\
  >>> torch.dist(Apinv @ A, torch.eye(3))\ntensor(8.5633e-07)\n\n>>> A = torch.randn(3,\
  \ 3, dtype=torch.complex64)\n>>> A = A + A.T.conj()  # creates a Hermitian matrix\n\
  >>> Apinv = torch.linalg.pinv(A, hermitian=True)\n>>> torch.dist(Apinv @ A, torch.eye(3))\n\
  tensor(1.0830e-06)\n\n\n"
