api: torch.linalg.ldl_factor
doc: "\n\ntorch.linalg.ldl_factor(A, *, hermitian=False, out=None)\xB6\nComputes a\
  \ compact representation of the LDL factorization of a Hermitian or symmetric (possibly\
  \ indefinite) matrix.\nWhen A is complex valued it can be Hermitian (hermitian=\
  \ True)\nor symmetric (hermitian= False).\nThe factorization is of the form the\
  \ form A=LDLTA = L D L^TA=LDLT.\nIf hermitian is True then transpose operation is\
  \ the conjugate transpose.\nLLL (or UUU) and DDD are stored in compact form in LD.\n\
  They follow the format specified by LAPACK\u2019s sytrf function.\nThese tensors\
  \ may be used in torch.linalg.ldl_solve() to solve linear systems.\nSupports input\
  \ of float, double, cfloat and cdouble dtypes.\nAlso supports batches of matrices,\
  \ and if A is a batch of matrices then\nthe output has the same batch dimensions.\n\
  \nNote\nWhen inputs are on a CUDA device, this function synchronizes that device\
  \ with the CPU. For a version of this function that does not synchronize, see torch.linalg.ldl_factor_ex().\n\
  \n\nParameters\nA (Tensor) \u2013 tensor of shape (*, n, n) where * is zero or more\
  \ batch dimensions\nconsisting of symmetric or Hermitian matrices.\n\nKeyword Arguments\n\
  \nhermitian (bool, optional) \u2013 whether to consider the input to be Hermitian\
  \ or symmetric.\nFor real-valued matrices, this switch has no effect. Default: False.\n\
  out (tuple, optional) \u2013 tuple of two tensors to write the output to. Ignored\
  \ if None. Default: None.\n\n\nReturns\nA named tuple (LD, pivots).\n\n\nExamples:\n\
  >>> A = torch.randn(3, 3)\n>>> A = A @ A.mT # make symmetric\n>>> A\ntensor([[7.2079,\
  \ 4.2414, 1.9428],\n        [4.2414, 3.4554, 0.3264],\n        [1.9428, 0.3264,\
  \ 1.3823]])\n>>> LD, pivots = torch.linalg.ldl_factor(A)\n>>> LD\ntensor([[ 7.2079,\
  \  0.0000,  0.0000],\n        [ 0.5884,  0.9595,  0.0000],\n        [ 0.2695, -0.8513,\
  \  0.1633]])\n>>> pivots\ntensor([1, 2, 3], dtype=torch.int32)\n\n\n"
