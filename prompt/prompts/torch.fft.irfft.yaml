api: torch.fft.irfft
doc: "\n\ntorch.fft.irfft(input, n=None, dim=-1, norm=None, *, out=None) \u2192 Tensor\xB6\
  \nComputes the inverse of rfft().\ninput is interpreted as a one-sided Hermitian\
  \ signal in the Fourier\ndomain, as produced by rfft(). By the Hermitian property,\
  \ the\noutput will be real-valued.\n\nNote\nSome input frequencies must be real-valued\
  \ to satisfy the Hermitian\nproperty. In these cases the imaginary component will\
  \ be ignored.\nFor example, any imaginary component in the zero-frequency term cannot\n\
  be represented in a real output and so will always be ignored.\n\n\nNote\nThe correct\
  \ interpretation of the Hermitian input depends on the length of\nthe original data,\
  \ as given by n. This is because each input shape\ncould correspond to either an\
  \ odd or even length signal. By default, the\nsignal is assumed to be even length\
  \ and odd signals will not round-trip\nproperly. So, it is recommended to always\
  \ pass the signal length n.\n\n\nNote\nSupports torch.half and torch.chalf on CUDA\
  \ with GPU Architecture SM53 or greater.\nHowever it only supports powers of 2 signal\
  \ length in every transformed dimension.\nWith default arguments, size of the transformed\
  \ dimension should be (2^n + 1) as argument\nn defaults to even output size = 2\
  \ * (transformed_dim_size - 1)\n\n\nParameters\n\ninput (Tensor) \u2013 the input\
  \ tensor representing a half-Hermitian signal\nn (int, optional) \u2013 Output signal\
  \ length. This determines the length of the\noutput signal. If given, the input\
  \ will either be zero-padded or trimmed to this\nlength before computing the real\
  \ IFFT.\nDefaults to even output: n=2*(input.size(dim) - 1).\ndim (int, optional)\
  \ \u2013 The dimension along which to take the one dimensional real IFFT.\nnorm\
  \ (str, optional) \u2013 Normalization mode. For the backward transform\n(irfft()),\
  \ these correspond to:\n\n\"forward\" - no normalization\n\"backward\" - normalize\
  \ by 1/n\n\"ortho\" - normalize by 1/sqrt(n) (making the real IFFT orthonormal)\n\
  \nCalling the forward transform (rfft()) with the same\nnormalization mode will\
  \ apply an overall normalization of 1/n between\nthe two transforms. This is required\
  \ to make irfft()\nthe exact inverse.\nDefault is \"backward\" (normalize by 1/n).\n\
  \n\n\nKeyword Arguments\nout (Tensor, optional) \u2013 the output tensor.\n\n\n\
  Example\n>>> t = torch.linspace(0, 1, 5)\n>>> t\ntensor([0.0000, 0.2500, 0.5000,\
  \ 0.7500, 1.0000])\n>>> T = torch.fft.rfft(t)\n>>> T\ntensor([ 2.5000+0.0000j, -0.6250+0.8602j,\
  \ -0.6250+0.2031j])\n\n\nWithout specifying the output length to irfft(), the output\n\
  will not round-trip properly because the input is odd-length:\n>>> torch.fft.irfft(T)\n\
  tensor([0.1562, 0.3511, 0.7812, 1.2114])\n\n\nSo, it is recommended to always pass\
  \ the signal length n:\n>>> roundtrip = torch.fft.irfft(T, t.numel())\n>>> torch.testing.assert_close(roundtrip,\
  \ t, check_stride=False)\n\n\n"
