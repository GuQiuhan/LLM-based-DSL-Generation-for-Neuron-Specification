api: torch.signal.windows.general_cosine
doc: "\n\ntorch.signal.windows.general_cosine(M, *, a, sym=True, dtype=None, layout=torch.strided,\
  \ device=None, requires_grad=False)[source]\xB6\nComputes the general cosine window.\n\
  The general cosine window is defined as follows:\n\nwn=\u2211i=0M\u22121(\u2212\
  1)iaicos\u2061(2\u03C0inM\u22121)w_n = \\sum^{M-1}_{i=0} (-1)^i a_i \\cos{ \\left(\
  \ \\frac{2 \\pi i n}{M - 1}\\right)}\n\nwn\u200B=i=0\u2211M\u22121\u200B(\u2212\
  1)iai\u200Bcos(M\u221212\u03C0in\u200B)The window is normalized to 1 (maximum value\
  \ is 1). However, the 1 doesn\u2019t appear if M is even and sym is True.\n\nParameters\n\
  M (int) \u2013 the length of the window.\nIn other words, the number of points of\
  \ the returned window.\n\nKeyword Arguments\n\na (Iterable) \u2013 the coefficients\
  \ associated to each of the cosine functions.\nsym (bool, optional) \u2013 If False,\
  \ returns a periodic window suitable for use in spectral analysis.\nIf True, returns\
  \ a symmetric window suitable for use in filter design. Default: True.\ndtype (torch.dtype,\
  \ optional) \u2013 the desired data type of returned tensor.\nDefault: if None,\
  \ uses a global default (see torch.set_default_dtype()).\nlayout (torch.layout,\
  \ optional) \u2013 the desired layout of returned Tensor.\nDefault: torch.strided.\n\
  device (torch.device, optional) \u2013 the desired device of returned tensor.\n\
  Default: if None, uses the current device for the default tensor type\n(see torch.set_default_device()).\
  \ device will be the CPU\nfor CPU tensor types and the current CUDA device for CUDA\
  \ tensor types.\nrequires_grad (bool, optional) \u2013 If autograd should record\
  \ operations on the\nreturned tensor. Default: False.\n\n\nReturn type\nTensor\n\
  \n\nExamples:\n>>> # Generates a symmetric general cosine window with 3 coefficients.\n\
  >>> torch.signal.windows.general_cosine(10, a=[0.46, 0.23, 0.31], sym=True)\ntensor([0.5400,\
  \ 0.3376, 0.1288, 0.4200, 0.9136, 0.9136, 0.4200, 0.1288, 0.3376, 0.5400])\n\n>>>\
  \ # Generates a periodic general cosine window wit 2 coefficients.\n>>> torch.signal.windows.general_cosine(10,\
  \ a=[0.5, 1 - 0.5], sym=False)\ntensor([0.0000, 0.0955, 0.3455, 0.6545, 0.9045,\
  \ 1.0000, 0.9045, 0.6545, 0.3455, 0.0955])\n\n\n"
