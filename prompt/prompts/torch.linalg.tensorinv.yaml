api: torch.linalg.tensorinv
doc: "\n\ntorch.linalg.tensorinv(A, ind=2, *, out=None) \u2192 Tensor\xB6\nComputes\
  \ the multiplicative inverse of torch.tensordot().\nIf m is the product of the first\
  \ ind dimensions of A and n is the product of\nthe rest of the dimensions, this\
  \ function expects m and n to be equal.\nIf this is the case, it computes a tensor\
  \ X such that\ntensordot(A, X, ind) is the identity matrix in dimension m.\nX will\
  \ have the shape of A but with the first ind dimensions pushed back to the end\n\
  X.shape == A.shape[ind:] + A.shape[:ind]\n\n\nSupports input of float, double, cfloat\
  \ and cdouble dtypes.\n\nNote\nWhen A is a 2-dimensional tensor and ind= 1,\nthis\
  \ function computes the (multiplicative) inverse of A\n(see torch.linalg.inv()).\n\
  \n\nNote\nConsider using torch.linalg.tensorsolve() if possible for multiplying\
  \ a tensor on the left\nby the tensor inverse, as:\nlinalg.tensorsolve(A, B) ==\
  \ torch.tensordot(linalg.tensorinv(A), B)  # When B is a tensor with shape A.shape[:B.ndim]\n\
  \n\nIt is always preferred to use tensorsolve() when possible, as it is faster and\
  \ more\nnumerically stable than computing the pseudoinverse explicitly.\n\n\nSee\
  \ also\ntorch.linalg.tensorsolve() computes\ntorch.tensordot(tensorinv(A), B).\n\
  \n\nParameters\n\nA (Tensor) \u2013 tensor to invert. Its shape must satisfy\nprod(A.shape[:ind])\
  \ ==\nprod(A.shape[ind:]).\nind (int) \u2013 index at which to compute the inverse\
  \ of torch.tensordot(). Default: 2.\n\n\nKeyword Arguments\nout (Tensor, optional)\
  \ \u2013 output tensor. Ignored if None. Default: None.\n\nRaises\nRuntimeError\
  \ \u2013 if the reshaped A is not invertible or the product of the first\n    ind\
  \ dimensions is not equal to the product of the rest.\n\n\nExamples:\n>>> A = torch.eye(4\
  \ * 6).reshape((4, 6, 8, 3))\n>>> Ainv = torch.linalg.tensorinv(A, ind=2)\n>>> Ainv.shape\n\
  torch.Size([8, 3, 4, 6])\n>>> B = torch.randn(4, 6)\n>>> torch.allclose(torch.tensordot(Ainv,\
  \ B), torch.linalg.tensorsolve(A, B))\nTrue\n\n>>> A = torch.randn(4, 4)\n>>> Atensorinv\
  \ = torch.linalg.tensorinv(A, ind=1)\n>>> Ainv = torch.linalg.inv(A)\n>>> torch.allclose(Atensorinv,\
  \ Ainv)\nTrue\n\n\n"
