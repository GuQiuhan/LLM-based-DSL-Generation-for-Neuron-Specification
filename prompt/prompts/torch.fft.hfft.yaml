api: torch.fft.hfft
doc: "\n\ntorch.fft.hfft(input, n=None, dim=-1, norm=None, *, out=None) \u2192 Tensor\xB6\
  \nComputes the one dimensional discrete Fourier transform of a Hermitian\nsymmetric\
  \ input signal.\n\nNote\nhfft()/ihfft() are analogous to\nrfft()/irfft(). The real\
  \ FFT expects\na real signal in the time-domain and gives a Hermitian symmetry in\
  \ the\nfrequency-domain. The Hermitian FFT is the opposite; Hermitian symmetric\
  \ in\nthe time-domain and real-valued in the frequency-domain. For this reason,\n\
  special care needs to be taken with the length argument n, in the\nsame way as with\
  \ irfft().\n\n\nNote\nBecause the signal is Hermitian in the time-domain, the result\
  \ will be\nreal in the frequency domain. Note that some input frequencies must be\n\
  real-valued to satisfy the Hermitian property. In these cases the imaginary\ncomponent\
  \ will be ignored. For example, any imaginary component in\ninput[0] would result\
  \ in one or more complex frequency terms which\ncannot be represented in a real\
  \ output and so will always be ignored.\n\n\nNote\nThe correct interpretation of\
  \ the Hermitian input depends on the length of\nthe original data, as given by n.\
  \ This is because each input shape\ncould correspond to either an odd or even length\
  \ signal. By default, the\nsignal is assumed to be even length and odd signals will\
  \ not round-trip\nproperly. So, it is recommended to always pass the signal length\
  \ n.\n\n\nNote\nSupports torch.half and torch.chalf on CUDA with GPU Architecture\
  \ SM53 or greater.\nHowever it only supports powers of 2 signal length in every\
  \ transformed dimension.\nWith default arguments, size of the transformed dimension\
  \ should be (2^n + 1) as argument\nn defaults to even output size = 2 * (transformed_dim_size\
  \ - 1)\n\n\nParameters\n\ninput (Tensor) \u2013 the input tensor representing a\
  \ half-Hermitian signal\nn (int, optional) \u2013 Output signal length. This determines\
  \ the length of the\nreal output. If given, the input will either be zero-padded\
  \ or trimmed to this\nlength before computing the Hermitian FFT.\nDefaults to even\
  \ output: n=2*(input.size(dim) - 1).\ndim (int, optional) \u2013 The dimension along\
  \ which to take the one dimensional Hermitian FFT.\nnorm (str, optional) \u2013\
  \ Normalization mode. For the forward transform\n(hfft()), these correspond to:\n\
  \n\"forward\" - normalize by 1/n\n\"backward\" - no normalization\n\"ortho\" - normalize\
  \ by 1/sqrt(n) (making the Hermitian FFT orthonormal)\n\nCalling the backward transform\
  \ (ihfft()) with the same\nnormalization mode will apply an overall normalization\
  \ of 1/n between\nthe two transforms. This is required to make ihfft()\nthe exact\
  \ inverse.\nDefault is \"backward\" (no normalization).\n\n\n\nKeyword Arguments\n\
  out (Tensor, optional) \u2013 the output tensor.\n\n\nExample\nTaking a real-valued\
  \ frequency signal and bringing it into the time domain\ngives Hermitian symmetric\
  \ output:\n>>> t = torch.linspace(0, 1, 5)\n>>> t\ntensor([0.0000, 0.2500, 0.5000,\
  \ 0.7500, 1.0000])\n>>> T = torch.fft.ifft(t)\n>>> T\ntensor([ 0.5000-0.0000j, -0.1250-0.1720j,\
  \ -0.1250-0.0406j, -0.1250+0.0406j,\n        -0.1250+0.1720j])\n\n\nNote that T[1]\
  \ == T[-1].conj() and T[2] == T[-2].conj() is\nredundant. We can thus compute the\
  \ forward transform without considering\nnegative frequencies:\n>>> torch.fft.hfft(T[:3],\
  \ n=5)\ntensor([0.0000, 0.2500, 0.5000, 0.7500, 1.0000])\n\n\nLike with irfft(),\
  \ the output length must be given in order\nto recover an even length output:\n\
  >>> torch.fft.hfft(T[:3])\ntensor([0.1250, 0.2809, 0.6250, 0.9691])\n\n\n"
