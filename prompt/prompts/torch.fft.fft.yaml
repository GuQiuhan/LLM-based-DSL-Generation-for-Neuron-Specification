api: torch.fft.fft
doc: "\n\ntorch.fft.fft(input, n=None, dim=-1, norm=None, *, out=None) \u2192 Tensor\xB6\
  \nComputes the one dimensional discrete Fourier transform of input.\n\nNote\nThe\
  \ Fourier domain representation of any real signal satisfies the\nHermitian property:\
  \ X[i] = conj(X[-i]). This function always returns both\nthe positive and negative\
  \ frequency terms even though, for real inputs, the\nnegative frequencies are redundant.\
  \ rfft() returns the\nmore compact one-sided representation where only the positive\
  \ frequencies\nare returned.\n\n\nNote\nSupports torch.half and torch.chalf on CUDA\
  \ with GPU Architecture SM53 or greater.\nHowever it only supports powers of 2 signal\
  \ length in every transformed dimension.\n\n\nParameters\n\ninput (Tensor) \u2013\
  \ the input tensor\nn (int, optional) \u2013 Signal length. If given, the input\
  \ will either be zero-padded\nor trimmed to this length before computing the FFT.\n\
  dim (int, optional) \u2013 The dimension along which to take the one dimensional\
  \ FFT.\nnorm (str, optional) \u2013 Normalization mode. For the forward transform\n\
  (fft()), these correspond to:\n\n\"forward\" - normalize by 1/n\n\"backward\" -\
  \ no normalization\n\"ortho\" - normalize by 1/sqrt(n) (making the FFT orthonormal)\n\
  \nCalling the backward transform (ifft()) with the same\nnormalization mode will\
  \ apply an overall normalization of 1/n between\nthe two transforms. This is required\
  \ to make ifft()\nthe exact inverse.\nDefault is \"backward\" (no normalization).\n\
  \n\n\nKeyword Arguments\nout (Tensor, optional) \u2013 the output tensor.\n\n\n\
  Example\n>>> t = torch.arange(4)\n>>> t\ntensor([0, 1, 2, 3])\n>>> torch.fft.fft(t)\n\
  tensor([ 6.+0.j, -2.+2.j, -2.+0.j, -2.-2.j])\n\n\n>>> t = torch.tensor([0.+1.j,\
  \ 2.+3.j, 4.+5.j, 6.+7.j])\n>>> torch.fft.fft(t)\ntensor([12.+16.j, -8.+0.j, -4.-4.j,\
  \  0.-8.j])\n\n\n"
