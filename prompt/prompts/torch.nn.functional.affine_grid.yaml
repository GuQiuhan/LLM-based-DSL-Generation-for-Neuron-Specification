api: torch.nn.functional.affine_grid
doc: "\n\ntorch.nn.functional.affine_grid(theta, size, align_corners=None)[source]\xB6\
  \nGenerate 2D or 3D flow field (sampling grid), given a batch of affine matrices\
  \ theta.\n\nNote\nThis function is often used in conjunction with grid_sample()\n\
  to build Spatial Transformer Networks .\n\n\nParameters\n\ntheta (Tensor) \u2013\
  \ input batch of affine matrices with shape\n(N\xD72\xD73N \\times 2 \\times 3N\xD7\
  2\xD73) for 2D or\n(N\xD73\xD74N \\times 3 \\times 4N\xD73\xD74) for 3D\nsize (torch.Size)\
  \ \u2013 the target output image size.\n(N\xD7C\xD7H\xD7WN \\times C \\times H \\\
  times WN\xD7C\xD7H\xD7W for 2D or\nN\xD7C\xD7D\xD7H\xD7WN \\times C \\times D \\\
  times H \\times WN\xD7C\xD7D\xD7H\xD7W for 3D)\nExample: torch.Size((32, 3, 24,\
  \ 24))\nalign_corners (bool, optional) \u2013 if True, consider -1 and 1\nto refer\
  \ to the centers of the corner pixels rather than the image corners.\nRefer to grid_sample()\
  \ for a more complete description.\nA grid generated by affine_grid() should be\
  \ passed to grid_sample()\nwith the same setting for this option.\nDefault: False\n\
  \n\nReturns\noutput Tensor of size (N\xD7H\xD7W\xD72N \\times H \\times W \\times\
  \ 2N\xD7H\xD7W\xD72)\n\nReturn type\noutput (Tensor)\n\n\n\nWarning\nWhen align_corners\
  \ = True, the grid positions depend on the pixel\nsize relative to the input image\
  \ size, and so the locations sampled by\ngrid_sample() will differ for the same\
  \ input given at different\nresolutions (that is, after being upsampled or downsampled).\n\
  The default behavior up to version 1.2.0 was align_corners = True.\nSince then,\
  \ the default behavior has been changed to align_corners = False,\nin order to bring\
  \ it in line with the default for interpolate().\n\n\nWarning\nWhen align_corners\
  \ = True, 2D affine transforms on 1D data and\n3D affine transforms on 2D data (that\
  \ is, when one of the spatial\ndimensions has unit size) are ill-defined, and not\
  \ an intended use case.\nThis is not a problem when align_corners = False.\nUp to\
  \ version 1.2.0, all grid points along a unit dimension were\nconsidered arbitrarily\
  \ to be at -1.\nFrom version 1.3.0, under align_corners = True all grid points\n\
  along a unit dimension are considered to be at 0\n(the center of the input image).\n\
  \n"
