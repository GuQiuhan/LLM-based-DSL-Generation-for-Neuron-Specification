api: torch.linalg.matrix_rank
doc: "\n\ntorch.linalg.matrix_rank(A, *, atol=None, rtol=None, hermitian=False, out=None)\
  \ \u2192 Tensor\xB6\nComputes the numerical rank of a matrix.\nThe matrix rank is\
  \ computed as the number of singular values\n(or eigenvalues in absolute value when\
  \ hermitian= True)\nthat are greater than max\u2061(atol,\u03C31\u2217rtol)\\max(\\\
  text{atol}, \\sigma_1 * \\text{rtol})max(atol,\u03C31\u200B\u2217rtol) threshold,\n\
  where \u03C31\\sigma_1\u03C31\u200B is the largest singular value (or eigenvalue).\n\
  Supports input of float, double, cfloat and cdouble dtypes.\nAlso supports batches\
  \ of matrices, and if A is a batch of matrices then\nthe output has the same batch\
  \ dimensions.\nIf hermitian= True, A is assumed to be Hermitian if complex or\n\
  symmetric if real, but this is not checked internally. Instead, just the lower\n\
  triangular part of the matrix is used in the computations.\nIf rtol is not specified\
  \ and A is a matrix of dimensions (m, n),\nthe relative tolerance is set to be rtol=max\u2061\
  (m,n)\u03B5\\text{rtol} = \\max(m, n) \\varepsilonrtol=max(m,n)\u03B5\nand \u03B5\
  \\varepsilon\u03B5 is the epsilon value for the dtype of A (see finfo).\nIf rtol\
  \ is not specified and atol is specified to be larger than zero then\nrtol is set\
  \ to zero.\nIf atol or rtol is a torch.Tensor, its shape must be broadcastable to\
  \ that\nof the singular values of A as returned by torch.linalg.svdvals().\n\nNote\n\
  This function has NumPy compatible variant linalg.matrix_rank(A, tol, hermitian=False).\n\
  However, use of the positional argument tol is deprecated in favor of atol and rtol.\n\
  \n\nNote\nThe matrix rank is computed using a singular value decomposition\ntorch.linalg.svdvals()\
  \ if hermitian= False (default) and the eigenvalue\ndecomposition torch.linalg.eigvalsh()\
  \ when hermitian= True.\nWhen inputs are on a CUDA device, this function synchronizes\
  \ that device with the CPU.\n\n\nParameters\n\nA (Tensor) \u2013 tensor of shape\
  \ (*, m, n) where * is zero or more batch dimensions.\ntol (float, Tensor, optional)\
  \ \u2013 [NumPy Compat] Alias for atol. Default: None.\n\n\nKeyword Arguments\n\n\
  atol (float, Tensor, optional) \u2013 the absolute tolerance value. When None it\u2019\
  s considered to be zero.\nDefault: None.\nrtol (float, Tensor, optional) \u2013\
  \ the relative tolerance value. See above for the value it takes when None.\nDefault:\
  \ None.\nhermitian (bool) \u2013 indicates whether A is Hermitian if complex\nor\
  \ symmetric if real. Default: False.\nout (Tensor, optional) \u2013 output tensor.\
  \ Ignored if None. Default: None.\n\n\n\nExamples:\n>>> A = torch.eye(10)\n>>> torch.linalg.matrix_rank(A)\n\
  tensor(10)\n>>> B = torch.eye(10)\n>>> B[0, 0] = 0\n>>> torch.linalg.matrix_rank(B)\n\
  tensor(9)\n\n>>> A = torch.randn(4, 3, 2)\n>>> torch.linalg.matrix_rank(A)\ntensor([2,\
  \ 2, 2, 2])\n\n>>> A = torch.randn(2, 4, 2, 3)\n>>> torch.linalg.matrix_rank(A)\n\
  tensor([[2, 2, 2, 2],\n        [2, 2, 2, 2]])\n\n>>> A = torch.randn(2, 4, 3, 3,\
  \ dtype=torch.complex64)\n>>> torch.linalg.matrix_rank(A)\ntensor([[3, 3, 3, 3],\n\
  \        [3, 3, 3, 3]])\n>>> torch.linalg.matrix_rank(A, hermitian=True)\ntensor([[3,\
  \ 3, 3, 3],\n        [3, 3, 3, 3]])\n>>> torch.linalg.matrix_rank(A, atol=1.0, rtol=0.0)\n\
  tensor([[3, 2, 2, 2],\n        [1, 2, 1, 2]])\n>>> torch.linalg.matrix_rank(A, atol=1.0,\
  \ rtol=0.0, hermitian=True)\ntensor([[2, 2, 2, 1],\n        [1, 2, 2, 2]])\n\n\n"
