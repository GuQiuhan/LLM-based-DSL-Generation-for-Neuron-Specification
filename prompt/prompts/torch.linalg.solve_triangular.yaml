api: torch.linalg.solve_triangular
doc: "\n\ntorch.linalg.solve_triangular(A, B, *, upper, left=True, unitriangular=False,\
  \ out=None) \u2192 Tensor\xB6\nComputes the solution of a triangular system of linear\
  \ equations with a unique solution.\nLetting K\\mathbb{K}K be R\\mathbb{R}R or C\\\
  mathbb{C}C,\nthis function computes the solution X\u2208Kn\xD7kX \\in \\mathbb{K}^{n\
  \ \\times k}X\u2208Kn\xD7k of the linear system\nassociated to the triangular matrix\
  \ A\u2208Kn\xD7nA \\in \\mathbb{K}^{n \\times n}A\u2208Kn\xD7n without zeros on\
  \ the diagonal\n(that is, it is invertible) and the rectangular matrix , B\u2208\
  Kn\xD7kB \\in \\mathbb{K}^{n \\times k}B\u2208Kn\xD7k,\nwhich is defined as\n\n\
  AX=BAX = B\n\nAX=BThe argument upper signals whether AAA is upper or lower triangular.\n\
  If left= False, this function returns the matrix X\u2208Kn\xD7kX \\in \\mathbb{K}^{n\
  \ \\times k}X\u2208Kn\xD7k that\nsolves the system\n\nXA=BA\u2208Kk\xD7k,B\u2208\
  Kn\xD7k.XA = B\\mathrlap{\\qquad A \\in \\mathbb{K}^{k \\times k}, B \\in \\mathbb{K}^{n\
  \ \\times k}.}XA=BA\u2208Kk\xD7k,B\u2208Kn\xD7k.If upper= True (resp. False) just\
  \ the upper (resp. lower) triangular half of A\nwill be accessed. The elements below\
  \ the main diagonal will be considered to be zero and will not be accessed.\nIf\
  \ unitriangular= True, the diagonal of A is assumed to be ones and will not be accessed.\n\
  The result may contain NaN s if the diagonal of A contains zeros or elements that\n\
  are very close to zero and unitriangular= False (default) or if the input matrix\n\
  has very small eigenvalues.\nSupports inputs of float, double, cfloat and cdouble\
  \ dtypes.\nAlso supports batches of matrices, and if the inputs are batches of matrices\
  \ then\nthe output has the same batch dimensions.\n\nSee also\ntorch.linalg.solve()\
  \ computes the solution of a general square system of linear\nequations with a unique\
  \ solution.\n\n\nParameters\n\nA (Tensor) \u2013 tensor of shape (*, n, n) (or (*,\
  \ k, k) if left= False)\nwhere * is zero or more batch dimensions.\nB (Tensor) \u2013\
  \ right-hand side tensor of shape (*, n, k).\n\n\nKeyword Arguments\n\nupper (bool)\
  \ \u2013 whether A is an upper or lower triangular matrix.\nleft (bool, optional)\
  \ \u2013 whether to solve the system AX=BAX=BAX=B or XA=BXA = BXA=B. Default: True.\n\
  unitriangular (bool, optional) \u2013 if True, the diagonal elements of A are assumed\
  \ to be\nall equal to 1. Default: False.\nout (Tensor, optional) \u2013 output tensor.\
  \ B may be passed as out and the result is computed in-place on B.\nIgnored if None.\
  \ Default: None.\n\n\n\nExamples:\n>>> A = torch.randn(3, 3).triu_()\n>>> B = torch.randn(3,\
  \ 4)\n>>> X = torch.linalg.solve_triangular(A, B, upper=True)\n>>> torch.allclose(A\
  \ @ X, B)\nTrue\n\n>>> A = torch.randn(2, 3, 3).tril_()\n>>> B = torch.randn(2,\
  \ 3, 4)\n>>> X = torch.linalg.solve_triangular(A, B, upper=False)\n>>> torch.allclose(A\
  \ @ X, B)\nTrue\n\n>>> A = torch.randn(2, 4, 4).tril_()\n>>> B = torch.randn(2,\
  \ 3, 4)\n>>> X = torch.linalg.solve_triangular(A, B, upper=False, left=False)\n\
  >>> torch.allclose(X @ A, B)\nTrue\n\n\n"
