api: torch.linalg.tensorsolve
doc: "\n\ntorch.linalg.tensorsolve(A, B, dims=None, *, out=None) \u2192 Tensor\xB6\
  \nComputes the solution X to the system torch.tensordot(A, X) = B.\nIf m is the\
  \ product of the first B.ndim  dimensions of A and\nn is the product of the rest\
  \ of the dimensions, this function expects m and n to be equal.\nThe returned tensor\
  \ x satisfies\ntensordot(A, x, dims=x.ndim) == B.\nx has shape A[B.ndim:].\nIf dims\
  \ is specified, A will be reshaped as\nA = movedim(A, dims, range(len(dims) - A.ndim\
  \ + 1, 0))\n\n\nSupports inputs of float, double, cfloat and cdouble dtypes.\n\n\
  See also\ntorch.linalg.tensorinv() computes the multiplicative inverse of\ntorch.tensordot().\n\
  \n\nParameters\n\nA (Tensor) \u2013 tensor to solve for. Its shape must satisfy\n\
  prod(A.shape[:B.ndim]) ==\nprod(A.shape[B.ndim:]).\nB (Tensor) \u2013 tensor of\
  \ shape A.shape[:B.ndim].\ndims (Tuple[int], optional) \u2013 dimensions of A to\
  \ be moved.\nIf None, no dimensions are moved. Default: None.\n\n\nKeyword Arguments\n\
  out (Tensor, optional) \u2013 output tensor. Ignored if None. Default: None.\n\n\
  Raises\nRuntimeError \u2013 if the reshaped A.view(m, m) with m as above  is not\n\
  \    invertible or the product of the first ind dimensions is not equal\n    to\
  \ the product of the rest of the dimensions.\n\n\nExamples:\n>>> A = torch.eye(2\
  \ * 3 * 4).reshape((2 * 3, 4, 2, 3, 4))\n>>> B = torch.randn(2 * 3, 4)\n>>> X =\
  \ torch.linalg.tensorsolve(A, B)\n>>> X.shape\ntorch.Size([2, 3, 4])\n>>> torch.allclose(torch.tensordot(A,\
  \ X, dims=X.ndim), B)\nTrue\n\n>>> A = torch.randn(6, 4, 4, 3, 2)\n>>> B = torch.randn(4,\
  \ 3, 2)\n>>> X = torch.linalg.tensorsolve(A, B, dims=(0, 2))\n>>> X.shape\ntorch.Size([6,\
  \ 4])\n>>> A = A.permute(1, 3, 4, 0, 2)\n>>> A.shape[B.ndim:]\ntorch.Size([6, 4])\n\
  >>> torch.allclose(torch.tensordot(A, X, dims=X.ndim), B, atol=1e-6)\nTrue\n\n\n"
