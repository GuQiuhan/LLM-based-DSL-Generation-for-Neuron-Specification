api: torch.signal.windows.cosine
doc: "\n\ntorch.signal.windows.cosine(M, *, sym=True, dtype=None, layout=torch.strided,\
  \ device=None, requires_grad=False)[source]\xB6\nComputes a window with a simple\
  \ cosine waveform, following the same implementation as SciPy.\nThis window is also\
  \ known as the sine window.\nThe cosine window is defined as follows:\n\nwn=sin\u2061\
  (\u03C0(n+0.5)M)w_n = \\sin\\left(\\frac{\\pi (n + 0.5)}{M}\\right)\n\nwn\u200B\
  =sin(M\u03C0(n+0.5)\u200B)This formula differs from the typical cosine window formula\
  \ by incorporating a 0.5 term in the numerator,\nwhich shifts the sample positions.\
  \ This adjustment results in a window that starts and ends with non-zero values.\n\
  The window is normalized to 1 (maximum value is 1). However, the 1 doesn\u2019t\
  \ appear if M is even and sym is True.\n\nParameters\nM (int) \u2013 the length\
  \ of the window.\nIn other words, the number of points of the returned window.\n\
  \nKeyword Arguments\n\nsym (bool, optional) \u2013 If False, returns a periodic\
  \ window suitable for use in spectral analysis.\nIf True, returns a symmetric window\
  \ suitable for use in filter design. Default: True.\ndtype (torch.dtype, optional)\
  \ \u2013 the desired data type of returned tensor.\nDefault: if None, uses a global\
  \ default (see torch.set_default_dtype()).\nlayout (torch.layout, optional) \u2013\
  \ the desired layout of returned Tensor.\nDefault: torch.strided.\ndevice (torch.device,\
  \ optional) \u2013 the desired device of returned tensor.\nDefault: if None, uses\
  \ the current device for the default tensor type\n(see torch.set_default_device()).\
  \ device will be the CPU\nfor CPU tensor types and the current CUDA device for CUDA\
  \ tensor types.\nrequires_grad (bool, optional) \u2013 If autograd should record\
  \ operations on the\nreturned tensor. Default: False.\n\n\nReturn type\nTensor\n\
  \n\nExamples:\n>>> # Generates a symmetric cosine window.\n>>> torch.signal.windows.cosine(10)\n\
  tensor([0.1564, 0.4540, 0.7071, 0.8910, 0.9877, 0.9877, 0.8910, 0.7071, 0.4540,\
  \ 0.1564])\n\n>>> # Generates a periodic cosine window.\n>>> torch.signal.windows.cosine(10,\
  \ sym=False)\ntensor([0.1423, 0.4154, 0.6549, 0.8413, 0.9595, 1.0000, 0.9595, 0.8413,\
  \ 0.6549, 0.4154])\n\n\n"
