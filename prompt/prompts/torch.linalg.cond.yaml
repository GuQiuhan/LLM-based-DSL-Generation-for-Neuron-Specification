api: torch.linalg.cond
doc: "\n\ntorch.linalg.cond(A, p=None, *, out=None) \u2192 Tensor\xB6\nComputes the\
  \ condition number of a matrix with respect to a matrix norm.\nLetting K\\mathbb{K}K\
  \ be R\\mathbb{R}R or C\\mathbb{C}C,\nthe condition number \u03BA\\kappa\u03BA of\
  \ a matrix\nA\u2208Kn\xD7nA \\in \\mathbb{K}^{n \\times n}A\u2208Kn\xD7n is defined\
  \ as\n\n\u03BA(A)=\u2225A\u2225p\u2225A\u22121\u2225p\\kappa(A) = \\|A\\|_p\\|A^{-1}\\\
  |_p\u03BA(A)=\u2225A\u2225p\u200B\u2225A\u22121\u2225p\u200BThe condition number\
  \ of A measures the numerical stability of the linear system AX = B\nwith respect\
  \ to a matrix norm.\nSupports input of float, double, cfloat and cdouble dtypes.\n\
  Also supports batches of matrices, and if A is a batch of matrices then\nthe output\
  \ has the same batch dimensions.\np defines the matrix norm that is computed. The\
  \ following norms are supported:\n\n\np\nmatrix norm\n\n\n\nNone\n2-norm (largest\
  \ singular value)\n\n\u2018fro\u2019\nFrobenius norm\n\n\u2018nuc\u2019\nnuclear\
  \ norm\n\ninf\nmax(sum(abs(x), dim=1))\n\n-inf\nmin(sum(abs(x), dim=1))\n\n1\nmax(sum(abs(x),\
  \ dim=0))\n\n-1\nmin(sum(abs(x), dim=0))\n\n2\nlargest singular value\n\n-2\nsmallest\
  \ singular value\n\n\n\nwhere inf refers to float(\u2018inf\u2019), NumPy\u2019\
  s inf object, or any equivalent object.\nFor p is one of (\u2018fro\u2019, \u2018\
  nuc\u2019, inf, -inf, 1, -1), this function uses\ntorch.linalg.norm() and torch.linalg.inv().\n\
  As such, in this case, the matrix (or every matrix in the batch) A has to be square\n\
  and invertible.\nFor p in (2, -2), this function can be computed in terms of the\
  \ singular values\n\u03C31\u2265\u2026\u2265\u03C3n\\sigma_1 \\geq \\ldots \\geq\
  \ \\sigma_n\u03C31\u200B\u2265\u2026\u2265\u03C3n\u200B\n\n\u03BA2(A)=\u03C31\u03C3\
  n\u03BA\u22122(A)=\u03C3n\u03C31\\kappa_2(A) = \\frac{\\sigma_1}{\\sigma_n}\\qquad\
  \ \\kappa_{-2}(A) = \\frac{\\sigma_n}{\\sigma_1}\u03BA2\u200B(A)=\u03C3n\u200B\u03C3\
  1\u200B\u200B\u03BA\u22122\u200B(A)=\u03C31\u200B\u03C3n\u200B\u200BIn these cases,\
  \ it is computed using torch.linalg.svdvals(). For these norms, the matrix\n(or\
  \ every matrix in the batch) A may have any shape.\n\nNote\nWhen inputs are on a\
  \ CUDA device, this function synchronizes that device with the CPU\nif p is one\
  \ of (\u2018fro\u2019, \u2018nuc\u2019, inf, -inf, 1, -1).\n\n\nSee also\ntorch.linalg.solve()\
  \ for a function that solves linear systems of square matrices.\ntorch.linalg.lstsq()\
  \ for a function that solves linear systems of general matrices.\n\n\nParameters\n\
  \nA (Tensor) \u2013 tensor of shape (*, m, n) where * is zero or more batch dimensions\n\
  for p in (2, -2), and of shape (*, n, n) where every matrix\nis invertible for p\
  \ in (\u2018fro\u2019, \u2018nuc\u2019, inf, -inf, 1, -1).\np (int, inf, -inf, 'fro',\
  \ 'nuc', optional) \u2013 the type of the matrix norm to use in the computations\
  \ (see above). Default: None\n\n\nKeyword Arguments\nout (Tensor, optional) \u2013\
  \ output tensor. Ignored if None. Default: None.\n\nReturns\nA real-valued tensor,\
  \ even when A is complex.\n\nRaises\nRuntimeError \u2013 if p is one of (\u2018\
  fro\u2019, \u2018nuc\u2019, inf, -inf, 1, -1)\n    and the A matrix or any matrix\
  \ in the batch A is not square\n    or invertible.\n\n\nExamples:\n>>> A = torch.randn(3,\
  \ 4, 4, dtype=torch.complex64)\n>>> torch.linalg.cond(A)\n>>> A = torch.tensor([[1.,\
  \ 0, -1], [0, 1, 0], [1, 0, 1]])\n>>> torch.linalg.cond(A)\ntensor([1.4142])\n>>>\
  \ torch.linalg.cond(A, 'fro')\ntensor(3.1623)\n>>> torch.linalg.cond(A, 'nuc')\n\
  tensor(9.2426)\n>>> torch.linalg.cond(A, float('inf'))\ntensor(2.)\n>>> torch.linalg.cond(A,\
  \ float('-inf'))\ntensor(1.)\n>>> torch.linalg.cond(A, 1)\ntensor(2.)\n>>> torch.linalg.cond(A,\
  \ -1)\ntensor(1.)\n>>> torch.linalg.cond(A, 2)\ntensor([1.4142])\n>>> torch.linalg.cond(A,\
  \ -2)\ntensor([0.7071])\n\n>>> A = torch.randn(2, 3, 3)\n>>> torch.linalg.cond(A)\n\
  tensor([[9.5917],\n        [3.2538]])\n>>> A = torch.randn(2, 3, 3, dtype=torch.complex64)\n\
  >>> torch.linalg.cond(A)\ntensor([[4.6245],\n        [4.5671]])\n\n\n"
