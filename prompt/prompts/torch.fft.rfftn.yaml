api: torch.fft.rfftn
doc: "\n\ntorch.fft.rfftn(input, s=None, dim=None, norm=None, *, out=None) \u2192\
  \ Tensor\xB6\nComputes the N-dimensional discrete Fourier transform of real input.\n\
  The FFT of a real signal is Hermitian-symmetric,\nX[i_1, ..., i_n] = conj(X[-i_1,\
  \ ..., -i_n]) so the full\nfftn() output contains redundant information.\nrfftn()\
  \ instead omits the negative frequencies in the\nlast dimension.\n\nNote\nSupports\
  \ torch.half on CUDA with GPU Architecture SM53 or greater.\nHowever it only supports\
  \ powers of 2 signal length in every transformed dimensions.\n\n\nParameters\n\n\
  input (Tensor) \u2013 the input tensor\ns (Tuple[int], optional) \u2013 Signal size\
  \ in the transformed dimensions.\nIf given, each dimension dim[i] will either be\
  \ zero-padded or\ntrimmed to the length s[i] before computing the real FFT.\nIf\
  \ a length -1 is specified, no padding is done in that dimension.\nDefault: s =\
  \ [input.size(d) for d in dim]\ndim (Tuple[int], optional) \u2013 Dimensions to\
  \ be transformed.\nDefault: all dimensions, or the last len(s) dimensions if s is\
  \ given.\nnorm (str, optional) \u2013 Normalization mode. For the forward transform\n\
  (rfftn()), these correspond to:\n\n\"forward\" - normalize by 1/n\n\"backward\"\
  \ - no normalization\n\"ortho\" - normalize by 1/sqrt(n) (making the real FFT orthonormal)\n\
  \nWhere n = prod(s) is the logical FFT size.\nCalling the backward transform (irfftn())\
  \ with the same\nnormalization mode will apply an overall normalization of 1/n between\n\
  the two transforms. This is required to make irfftn()\nthe exact inverse.\nDefault\
  \ is \"backward\" (no normalization).\n\n\n\nKeyword Arguments\nout (Tensor, optional)\
  \ \u2013 the output tensor.\n\n\nExample\n>>> t = torch.rand(10, 10)\n>>> rfftn\
  \ = torch.fft.rfftn(t)\n>>> rfftn.size()\ntorch.Size([10, 6])\n\n\nCompared against\
  \ the full output from fftn(), we have all\nelements up to the Nyquist frequency.\n\
  >>> fftn = torch.fft.fftn(t)\n>>> torch.testing.assert_close(fftn[..., :6], rfftn,\
  \ check_stride=False)\n\n\nThe discrete Fourier transform is separable, so rfftn()\n\
  here is equivalent to a combination of fft() and\nrfft():\n>>> two_ffts = torch.fft.fft(torch.fft.rfft(t,\
  \ dim=1), dim=0)\n>>> torch.testing.assert_close(rfftn, two_ffts, check_stride=False)\n\
  \n\n"
