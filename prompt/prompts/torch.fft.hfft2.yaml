api: torch.fft.hfft2
doc: "\n\ntorch.fft.hfft2(input, s=None, dim=(-2, -1), norm=None, *, out=None) \u2192\
  \ Tensor\xB6\nComputes the 2-dimensional discrete Fourier transform of a Hermitian\
  \ symmetric\ninput signal. Equivalent to hfftn() but only\ntransforms the last two\
  \ dimensions by default.\ninput is interpreted as a one-sided Hermitian signal in\
  \ the time\ndomain. By the Hermitian property, the Fourier transform will be real-valued.\n\
  \nNote\nSupports torch.half and torch.chalf on CUDA with GPU Architecture SM53 or\
  \ greater.\nHowever it only supports powers of 2 signal length in every transformed\
  \ dimensions.\nWith default arguments, the size of last dimension should be (2^n\
  \ + 1) as argument\ns defaults to even output size = 2 * (last_dim_size - 1)\n\n\
  \nParameters\n\ninput (Tensor) \u2013 the input tensor\ns (Tuple[int], optional)\
  \ \u2013 Signal size in the transformed dimensions.\nIf given, each dimension dim[i]\
  \ will either be zero-padded or\ntrimmed to the length s[i] before computing the\
  \ Hermitian FFT.\nIf a length -1 is specified, no padding is done in that dimension.\n\
  Defaults to even output in the last dimension:\ns[-1] = 2*(input.size(dim[-1]) -\
  \ 1).\ndim (Tuple[int], optional) \u2013 Dimensions to be transformed.\nThe last\
  \ dimension must be the half-Hermitian compressed dimension.\nDefault: last two\
  \ dimensions.\nnorm (str, optional) \u2013 Normalization mode. For the forward transform\n\
  (hfft2()), these correspond to:\n\n\"forward\" - normalize by 1/n\n\"backward\"\
  \ - no normalization\n\"ortho\" - normalize by 1/sqrt(n) (making the Hermitian FFT\
  \ orthonormal)\n\nWhere n = prod(s) is the logical FFT size.\nCalling the backward\
  \ transform (ihfft2()) with the same\nnormalization mode will apply an overall normalization\
  \ of 1/n between\nthe two transforms. This is required to make ihfft2()\nthe exact\
  \ inverse.\nDefault is \"backward\" (no normalization).\n\n\n\nKeyword Arguments\n\
  out (Tensor, optional) \u2013 the output tensor.\n\n\nExample\nStarting from a real\
  \ frequency-space signal, we can generate a\nHermitian-symmetric time-domain signal:\n\
  >>> T = torch.rand(10, 9)\n>>> t = torch.fft.ihfft2(T)\nWithout specifying the output\
  \ length to hfftn(), the\noutput will not round-trip properly because the input\
  \ is odd-length in the\nlast dimension:\n>>> torch.fft.hfft2(t).size()\ntorch.Size([10,\
  \ 10])\n\n\nSo, it is recommended to always pass the signal shape s.\n>>> roundtrip\
  \ = torch.fft.hfft2(t, T.size())\n>>> roundtrip.size()\ntorch.Size([10, 9])\n>>>\
  \ torch.allclose(roundtrip, T)\nTrue\n\n\n"
