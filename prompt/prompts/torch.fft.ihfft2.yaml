api: torch.fft.ihfft2
doc: "\n\ntorch.fft.ihfft2(input, s=None, dim=(-2, -1), norm=None, *, out=None) \u2192\
  \ Tensor\xB6\nComputes the 2-dimensional inverse discrete Fourier transform of real\n\
  input. Equivalent to ihfftn() but transforms only the\ntwo last dimensions by default.\n\
  \nNote\nSupports torch.half on CUDA with GPU Architecture SM53 or greater.\nHowever\
  \ it only supports powers of 2 signal length in every transformed dimensions.\n\n\
  \nParameters\n\ninput (Tensor) \u2013 the input tensor\ns (Tuple[int], optional)\
  \ \u2013 Signal size in the transformed dimensions.\nIf given, each dimension dim[i]\
  \ will either be zero-padded or\ntrimmed to the length s[i] before computing the\
  \ Hermitian IFFT.\nIf a length -1 is specified, no padding is done in that dimension.\n\
  Default: s = [input.size(d) for d in dim]\ndim (Tuple[int], optional) \u2013 Dimensions\
  \ to be transformed.\nDefault: last two dimensions.\nnorm (str, optional) \u2013\
  \ Normalization mode. For the backward transform\n(ihfft2()), these correspond to:\n\
  \n\"forward\" - no normalization\n\"backward\" - normalize by 1/n\n\"ortho\" - normalize\
  \ by 1/sqrt(n) (making the Hermitian IFFT orthonormal)\n\nWhere n = prod(s) is the\
  \ logical IFFT size.\nCalling the forward transform (hfft2()) with the same\nnormalization\
  \ mode will apply an overall normalization of 1/n between\nthe two transforms. This\
  \ is required to make ihfft2()\nthe exact inverse.\nDefault is \"backward\" (normalize\
  \ by 1/n).\n\n\n\nKeyword Arguments\nout (Tensor, optional) \u2013 the output tensor.\n\
  \n\nExample\n>>> T = torch.rand(10, 10)\n>>> t = torch.fft.ihfft2(t)\n>>> t.size()\n\
  torch.Size([10, 6])\n\n\nCompared against the full output from ifft2(), the\nHermitian\
  \ time-space signal takes up only half the space.\n>>> fftn = torch.fft.ifft2(t)\n\
  >>> torch.allclose(fftn[..., :6], rfftn)\nTrue\n\n\nThe discrete Fourier transform\
  \ is separable, so ihfft2()\nhere is equivalent to a combination of ifft() and\n\
  ihfft():\n>>> two_ffts = torch.fft.ifft(torch.fft.ihfft(t, dim=1), dim=0)\n>>> torch.allclose(t,\
  \ two_ffts)\nTrue\n\n\n"
