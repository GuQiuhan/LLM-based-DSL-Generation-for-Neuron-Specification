api: torch.linalg.lu_solve
doc: "\n\ntorch.linalg.lu_solve(LU, pivots, B, *, left=True, adjoint=False, out=None)\
  \ \u2192 Tensor\xB6\nComputes the solution of a square system of linear equations\
  \ with a unique solution given an LU decomposition.\nLetting K\\mathbb{K}K be R\\\
  mathbb{R}R or C\\mathbb{C}C,\nthis function computes the solution X\u2208Kn\xD7\
  kX \\in \\mathbb{K}^{n \\times k}X\u2208Kn\xD7k of the linear system associated\
  \ to\nA\u2208Kn\xD7n,B\u2208Kn\xD7kA \\in \\mathbb{K}^{n \\times n}, B \\in \\mathbb{K}^{n\
  \ \\times k}A\u2208Kn\xD7n,B\u2208Kn\xD7k, which is defined as\n\nAX=BAX = B\n\n\
  AX=Bwhere AAA is given factorized as returned by lu_factor().\nIf left= False, this\
  \ function returns the matrix X\u2208Kn\xD7kX \\in \\mathbb{K}^{n \\times k}X\u2208\
  Kn\xD7k that solves the system\n\nXA=BA\u2208Kk\xD7k,B\u2208Kn\xD7k.XA = B\\mathrlap{\\\
  qquad A \\in \\mathbb{K}^{k \\times k}, B \\in \\mathbb{K}^{n \\times k}.}XA=BA\u2208\
  Kk\xD7k,B\u2208Kn\xD7k.If  adjoint= True (and left= True), given an LU factorization\
  \ of AAA\nthis function function returns the X\u2208Kn\xD7kX \\in \\mathbb{K}^{n\
  \ \\times k}X\u2208Kn\xD7k that solves the system\n\nAHX=BA\u2208Kk\xD7k,B\u2208\
  Kn\xD7k.A^{\\text{H}}X = B\\mathrlap{\\qquad A \\in \\mathbb{K}^{k \\times k}, B\
  \ \\in \\mathbb{K}^{n \\times k}.}AHX=BA\u2208Kk\xD7k,B\u2208Kn\xD7k.where AHA^{\\\
  text{H}}AH is the conjugate transpose when AAA is complex, and the\ntranspose when\
  \ AAA is real-valued. The left= False case is analogous.\nSupports inputs of float,\
  \ double, cfloat and cdouble dtypes.\nAlso supports batches of matrices, and if\
  \ the inputs are batches of matrices then\nthe output has the same batch dimensions.\n\
  \nParameters\n\nLU (Tensor) \u2013 tensor of shape (*, n, n) (or (*, k, k) if left=\
  \ True)\nwhere * is zero or more batch dimensions as returned by lu_factor().\n\
  pivots (Tensor) \u2013 tensor of shape (*, n) (or (*, k) if left= True)\nwhere *\
  \ is zero or more batch dimensions as returned by lu_factor().\nB (Tensor) \u2013\
  \ right-hand side tensor of shape (*, n, k).\n\n\nKeyword Arguments\n\nleft (bool,\
  \ optional) \u2013 whether to solve the system AX=BAX=BAX=B or XA=BXA = BXA=B. Default:\
  \ True.\nadjoint (bool, optional) \u2013 whether to solve the system AX=BAX=BAX=B\
  \ or AHX=BA^{\\text{H}}X = BAHX=B. Default: False.\nout (Tensor, optional) \u2013\
  \ output tensor. Ignored if None. Default: None.\n\n\n\nExamples:\n>>> A = torch.randn(3,\
  \ 3)\n>>> LU, pivots = torch.linalg.lu_factor(A)\n>>> B = torch.randn(3, 2)\n>>>\
  \ X = torch.linalg.lu_solve(LU, pivots, B)\n>>> torch.allclose(A @ X, B)\nTrue\n\
  \n>>> B = torch.randn(3, 3, 2)   # Broadcasting rules apply: A is broadcasted\n\
  >>> X = torch.linalg.lu_solve(LU, pivots, B)\n>>> torch.allclose(A @ X, B)\nTrue\n\
  \n>>> B = torch.randn(3, 5, 3)\n>>> X = torch.linalg.lu_solve(LU, pivots, B, left=False)\n\
  >>> torch.allclose(X @ A, B)\nTrue\n\n>>> B = torch.randn(3, 3, 4)   # Now solve\
  \ for A^T\n>>> X = torch.linalg.lu_solve(LU, pivots, B, adjoint=True)\n>>> torch.allclose(A.mT\
  \ @ X, B)\nTrue\n\n\n"
