api: torch.linalg.ldl_solve
doc: "\n\ntorch.linalg.ldl_solve(LD, pivots, B, *, hermitian=False, out=None) \u2192\
  \ Tensor\xB6\nComputes the solution of a system of linear equations using the LDL\
  \ factorization.\nLD and pivots are the compact representation of the LDL factorization\
  \ and\nare expected to be computed by torch.linalg.ldl_factor_ex().\nhermitian argument\
  \ to this function should be the same\nas the corresponding arguments in torch.linalg.ldl_factor_ex().\n\
  Supports input of float, double, cfloat and cdouble dtypes.\nAlso supports batches\
  \ of matrices, and if A is a batch of matrices then\nthe output has the same batch\
  \ dimensions.\n\nWarning\nThis function is \u201Cexperimental\u201D and it may change\
  \ in a future PyTorch release.\n\n\nParameters\n\nLD (Tensor) \u2013 the n times\
  \ n matrix or the batch of such matrices of size\n(*, n, n) where * is one or more\
  \ batch dimensions.\npivots (Tensor) \u2013 the pivots corresponding to the LDL\
  \ factorization of LD.\nB (Tensor) \u2013 right-hand side tensor of shape (*, n,\
  \ k).\n\n\nKeyword Arguments\n\nhermitian (bool, optional) \u2013 whether to consider\
  \ the decomposed matrix to be Hermitian or symmetric.\nFor real-valued matrices,\
  \ this switch has no effect. Default: False.\nout (tuple, optional) \u2013 output\
  \ tensor. B may be passed as out and the result is computed in-place on B.\nIgnored\
  \ if None. Default: None.\n\n\n\nExamples:\n>>> A = torch.randn(2, 3, 3)\n>>> A\
  \ = A @ A.mT # make symmetric\n>>> LD, pivots, info = torch.linalg.ldl_factor_ex(A)\n\
  >>> B = torch.randn(2, 3, 4)\n>>> X = torch.linalg.ldl_solve(LD, pivots, B)\n>>>\
  \ torch.linalg.norm(A @ X - B)\n>>> tensor(0.0001)\n\n\n"
