api: torch.nn.functional.conv2d
doc: "\n\ntorch.nn.functional.conv2d(input, weight, bias=None, stride=1, padding=0,\
  \ dilation=1, groups=1) \u2192 Tensor\xB6\nApplies a 2D convolution over an input\
  \ image composed of several input\nplanes.\nThis operator supports TensorFloat32.\n\
  See Conv2d for details and output shape.\n\nNote\nIn some circumstances when given\
  \ tensors on a CUDA device and using CuDNN, this operator may select a nondeterministic\
  \ algorithm to increase performance. If this is undesirable, you can try to make\
  \ the operation deterministic (potentially at a performance cost) by setting torch.backends.cudnn.deterministic\
  \ = True. See Reproducibility for more information.\n\n\nNote\nThis operator supports\
  \ complex data types i.e. complex32, complex64, complex128.\n\n\nParameters\n\n\
  input \u2013 input tensor of shape (minibatch,in_channels,iH,iW)(\\text{minibatch}\
  \ , \\text{in\\_channels} , iH , iW)(minibatch,in_channels,iH,iW)\nweight \u2013\
  \ filters of shape (out_channels,in_channelsgroups,kH,kW)(\\text{out\\_channels}\
  \ , \\frac{\\text{in\\_channels}}{\\text{groups}} , kH , kW)(out_channels,groupsin_channels\u200B\
  ,kH,kW)\nbias \u2013 optional bias tensor of shape (out_channels)(\\text{out\\_channels})(out_channels).\
  \ Default: None\nstride \u2013 the stride of the convolving kernel. Can be a single\
  \ number or a\ntuple (sH, sW). Default: 1\npadding \u2013 implicit paddings on both\
  \ sides of the input. Can be a string {\u2018valid\u2019, \u2018same\u2019},\nsingle\
  \ number or a tuple (padH, padW). Default: 0\npadding='valid' is the same as no\
  \ padding. padding='same' pads\nthe input so the output has the same shape as the\
  \ input. However, this mode\ndoesn\u2019t support any stride values other than 1.\n\
  \nWarning\nFor padding='same', if the weight is even-length and\ndilation is odd\
  \ in any dimension, a full pad() operation\nmay be needed internally. Lowering performance.\n\
  \n\ndilation \u2013 the spacing between kernel elements. Can be a single number\
  \ or\na tuple (dH, dW). Default: 1\ngroups \u2013 split input into groups, both\
  \ in_channels\\text{in\\_channels}in_channels and out_channels\\text{out\\_channels}out_channels\n\
  should be divisible by the number of groups. Default: 1\n\n\n\nExamples:\n>>> #\
  \ With square kernels and equal stride\n>>> filters = torch.randn(8, 4, 3, 3)\n\
  >>> inputs = torch.randn(1, 4, 5, 5)\n>>> F.conv2d(inputs, filters, padding=1)\n\
  \n\n"
