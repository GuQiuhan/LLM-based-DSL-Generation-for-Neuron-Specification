api: torch.fft.fft2
doc: "\n\ntorch.fft.fft2(input, s=None, dim=(-2, -1), norm=None, *, out=None) \u2192\
  \ Tensor\xB6\nComputes the 2 dimensional discrete Fourier transform of input.\n\
  Equivalent to fftn() but FFTs only the last two dimensions by default.\n\nNote\n\
  The Fourier domain representation of any real signal satisfies the\nHermitian property:\
  \ X[i, j] = conj(X[-i, -j]). This\nfunction always returns all positive and negative\
  \ frequency terms even\nthough, for real inputs, half of these values are redundant.\n\
  rfft2() returns the more compact one-sided representation\nwhere only the positive\
  \ frequencies of the last dimension are returned.\n\n\nNote\nSupports torch.half\
  \ and torch.chalf on CUDA with GPU Architecture SM53 or greater.\nHowever it only\
  \ supports powers of 2 signal length in every transformed dimensions.\n\n\nParameters\n\
  \ninput (Tensor) \u2013 the input tensor\ns (Tuple[int], optional) \u2013 Signal\
  \ size in the transformed dimensions.\nIf given, each dimension dim[i] will either\
  \ be zero-padded or\ntrimmed to the length s[i] before computing the FFT.\nIf a\
  \ length -1 is specified, no padding is done in that dimension.\nDefault: s = [input.size(d)\
  \ for d in dim]\ndim (Tuple[int], optional) \u2013 Dimensions to be transformed.\n\
  Default: last two dimensions.\nnorm (str, optional) \u2013 Normalization mode. For\
  \ the forward transform\n(fft2()), these correspond to:\n\n\"forward\" - normalize\
  \ by 1/n\n\"backward\" - no normalization\n\"ortho\" - normalize by 1/sqrt(n) (making\
  \ the FFT orthonormal)\n\nWhere n = prod(s) is the logical FFT size.\nCalling the\
  \ backward transform (ifft2()) with the same\nnormalization mode will apply an overall\
  \ normalization of 1/n\nbetween the two transforms. This is required to make\nifft2()\
  \ the exact inverse.\nDefault is \"backward\" (no normalization).\n\n\n\nKeyword\
  \ Arguments\nout (Tensor, optional) \u2013 the output tensor.\n\n\nExample\n>>>\
  \ x = torch.rand(10, 10, dtype=torch.complex64)\n>>> fft2 = torch.fft.fft2(x)\n\n\
  \nThe discrete Fourier transform is separable, so fft2()\nhere is equivalent to\
  \ two one-dimensional fft() calls:\n>>> two_ffts = torch.fft.fft(torch.fft.fft(x,\
  \ dim=0), dim=1)\n>>> torch.testing.assert_close(fft2, two_ffts, check_stride=False)\n\
  \n\n"
