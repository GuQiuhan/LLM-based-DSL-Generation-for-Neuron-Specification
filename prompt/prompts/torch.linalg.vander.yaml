api: torch.linalg.vander
doc: "\n\ntorch.linalg.vander(x, N=None) \u2192 Tensor\xB6\nGenerates a Vandermonde\
  \ matrix.\nReturns the Vandermonde matrix VVV\n\nV=(1x1x12\u2026x1N\u221211x2x22\u2026\
  x2N\u221211x3x32\u2026x3N\u22121\u22EE\u22EE\u22EE\u22F1\u22EE1xnxn2\u2026xnN\u2212\
  1).V = \\begin{pmatrix}\n        1 & x_1 & x_1^2 & \\dots & x_1^{N-1}\\\\\n    \
  \    1 & x_2 & x_2^2 & \\dots & x_2^{N-1}\\\\\n        1 & x_3 & x_3^2 & \\dots\
  \ & x_3^{N-1}\\\\\n        \\vdots & \\vdots & \\vdots & \\ddots &\\vdots \\\\\n\
  \        1 & x_n & x_n^2 & \\dots & x_n^{N-1}\n    \\end{pmatrix}.V=\u200B111\u22EE\
  1\u200Bx1\u200Bx2\u200Bx3\u200B\u22EExn\u200B\u200Bx12\u200Bx22\u200Bx32\u200B\u22EE\
  xn2\u200B\u200B\u2026\u2026\u2026\u22F1\u2026\u200Bx1N\u22121\u200Bx2N\u22121\u200B\
  x3N\u22121\u200B\u22EExnN\u22121\u200B\u200B\u200B.for N > 1.\nIf N= None, then\
  \ N = x.size(-1) so that the output is a square matrix.\nSupports inputs of float,\
  \ double, cfloat, cdouble, and integral dtypes.\nAlso supports batches of vectors,\
  \ and if x is a batch of vectors then\nthe output has the same batch dimensions.\n\
  Differences with numpy.vander:\n\nUnlike numpy.vander, this function returns the\
  \ powers of x in ascending order.\nTo get them in the reverse order call linalg.vander(x,\
  \ N).flip(-1).\n\n\nParameters\nx (Tensor) \u2013 tensor of shape (*, n) where *\
  \ is zero or more batch dimensions\nconsisting of vectors.\n\nKeyword Arguments\n\
  N (int, optional) \u2013 Number of columns in the output. Default: x.size(-1)\n\n\
  \nExample:\n>>> x = torch.tensor([1, 2, 3, 5])\n>>> linalg.vander(x)\ntensor([[\
  \  1,   1,   1,   1],\n        [  1,   2,   4,   8],\n        [  1,   3,   9,  27],\n\
  \        [  1,   5,  25, 125]])\n>>> linalg.vander(x, N=3)\ntensor([[ 1,  1,  1],\n\
  \        [ 1,  2,  4],\n        [ 1,  3,  9],\n        [ 1,  5, 25]])\n\n\n"
