api: torch.linalg.inv_ex
doc: "\n\ntorch.linalg.inv_ex(A, *, check_errors=False, out=None)\xB6\nComputes the\
  \ inverse of a square matrix if it is invertible.\nReturns a namedtuple (inverse,\
  \ info). inverse contains the result of\ninverting A and info stores the LAPACK\
  \ error codes.\nIf A is not an invertible matrix, or if it\u2019s a batch of matrices\n\
  and one or more of them is not an invertible matrix,\nthen info stores a positive\
  \ integer for the corresponding matrix.\nThe positive integer indicates the diagonal\
  \ element of the LU decomposition of\nthe input matrix that is exactly zero.\ninfo\
  \ filled with zeros indicates that the inversion was successful.\nIf check_errors=True\
  \ and info contains positive integers, then a RuntimeError is thrown.\nSupports\
  \ input of float, double, cfloat and cdouble dtypes.\nAlso supports batches of matrices,\
  \ and if A is a batch of matrices then\nthe output has the same batch dimensions.\n\
  \nNote\nWhen the inputs are on a CUDA device, this function synchronizes only when\
  \ check_errors= True.\n\n\nWarning\nThis function is \u201Cexperimental\u201D and\
  \ it may change in a future PyTorch release.\n\n\nSee also\ntorch.linalg.inv() is\
  \ a NumPy compatible variant that always checks for errors.\n\n\nParameters\n\n\
  A (Tensor) \u2013 tensor of shape (*, n, n) where * is zero or more batch dimensions\n\
  consisting of square matrices.\ncheck_errors (bool, optional) \u2013 controls whether\
  \ to check the content of info. Default: False.\n\n\nKeyword Arguments\nout (tuple,\
  \ optional) \u2013 tuple of two tensors to write the output to. Ignored if None.\
  \ Default: None.\n\n\nExamples:\n>>> A = torch.randn(3, 3)\n>>> Ainv, info = torch.linalg.inv_ex(A)\n\
  >>> torch.dist(torch.linalg.inv(A), Ainv)\ntensor(0.)\n>>> info\ntensor(0, dtype=torch.int32)\n\
  \n\n"
