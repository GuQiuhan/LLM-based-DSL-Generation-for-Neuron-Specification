api: torch.linalg.norm
doc: "\n\ntorch.linalg.norm(A, ord=None, dim=None, keepdim=False, *, out=None, dtype=None)\
  \ \u2192 Tensor\xB6\nComputes a vector or matrix norm.\nSupports input of float,\
  \ double, cfloat and cdouble dtypes.\nWhether this function computes a vector or\
  \ matrix norm is determined as follows:\n\nIf dim is an int, the vector norm will\
  \ be computed.\nIf dim is a 2-tuple, the matrix norm will be computed.\nIf dim=\
  \ None and ord= None,\nA will be flattened to 1D and the 2-norm of the resulting\
  \ vector will be computed.\nIf dim= None and ord != None, A must be 1D or 2D.\n\n\
  ord defines the norm that is computed. The following norms are supported:\n\n\n\
  ord\nnorm for matrices\nnorm for vectors\n\n\n\nNone (default)\nFrobenius norm\n\
  2-norm (see below)\n\n\u2018fro\u2019\nFrobenius norm\n\u2013 not supported \u2013\
  \n\n\u2018nuc\u2019\nnuclear norm\n\u2013 not supported \u2013\n\ninf\nmax(sum(abs(x),\
  \ dim=1))\nmax(abs(x))\n\n-inf\nmin(sum(abs(x), dim=1))\nmin(abs(x))\n\n0\n\u2013\
  \ not supported \u2013\nsum(x != 0)\n\n1\nmax(sum(abs(x), dim=0))\nas below\n\n\
  -1\nmin(sum(abs(x), dim=0))\nas below\n\n2\nlargest singular value\nas below\n\n\
  -2\nsmallest singular value\nas below\n\nother int or float\n\u2013 not supported\
  \ \u2013\nsum(abs(x)^{ord})^{(1 / ord)}\n\n\n\nwhere inf refers to float(\u2018\
  inf\u2019), NumPy\u2019s inf object, or any equivalent object.\n\nSee also\ntorch.linalg.vector_norm()\
  \ computes a vector norm.\ntorch.linalg.matrix_norm() computes a matrix norm.\n\
  The above functions are often clearer and more flexible than using torch.linalg.norm().\n\
  For example, torch.linalg.norm(A, ord=1, dim=(0, 1)) always\ncomputes a matrix norm,\
  \ but with torch.linalg.vector_norm(A, ord=1, dim=(0, 1)) it is possible\nto compute\
  \ a vector norm over the two dimensions.\n\n\nParameters\n\nA (Tensor) \u2013 tensor\
  \ of shape (*, n) or (*, m, n) where * is zero or more batch dimensions\nord (int,\
  \ float, inf, -inf, 'fro', 'nuc', optional) \u2013 order of norm. Default: None\n\
  dim (int, Tuple[int], optional) \u2013 dimensions over which to compute\nthe vector\
  \ or matrix norm. See above for the behavior when dim= None.\nDefault: None\nkeepdim\
  \ (bool, optional) \u2013 If set to True, the reduced dimensions are retained\n\
  in the result as dimensions with size one. Default: False\n\n\nKeyword Arguments\n\
  \nout (Tensor, optional) \u2013 output tensor. Ignored if None. Default: None.\n\
  dtype (torch.dtype, optional) \u2013 If specified, the input tensor is cast to\n\
  dtype before performing the operation, and the returned tensor\u2019s type\nwill\
  \ be dtype. Default: None\n\n\nReturns\nA real-valued tensor, even when A is complex.\n\
  \n\nExamples:\n>>> from torch import linalg as LA\n>>> a = torch.arange(9, dtype=torch.float)\
  \ - 4\n>>> a\ntensor([-4., -3., -2., -1.,  0.,  1.,  2.,  3.,  4.])\n>>> B = a.reshape((3,\
  \ 3))\n>>> B\ntensor([[-4., -3., -2.],\n        [-1.,  0.,  1.],\n        [ 2.,\
  \  3.,  4.]])\n\n>>> LA.norm(a)\ntensor(7.7460)\n>>> LA.norm(B)\ntensor(7.7460)\n\
  >>> LA.norm(B, 'fro')\ntensor(7.7460)\n>>> LA.norm(a, float('inf'))\ntensor(4.)\n\
  >>> LA.norm(B, float('inf'))\ntensor(9.)\n>>> LA.norm(a, -float('inf'))\ntensor(0.)\n\
  >>> LA.norm(B, -float('inf'))\ntensor(2.)\n\n>>> LA.norm(a, 1)\ntensor(20.)\n>>>\
  \ LA.norm(B, 1)\ntensor(7.)\n>>> LA.norm(a, -1)\ntensor(0.)\n>>> LA.norm(B, -1)\n\
  tensor(6.)\n>>> LA.norm(a, 2)\ntensor(7.7460)\n>>> LA.norm(B, 2)\ntensor(7.3485)\n\
  \n>>> LA.norm(a, -2)\ntensor(0.)\n>>> LA.norm(B.double(), -2)\ntensor(1.8570e-16,\
  \ dtype=torch.float64)\n>>> LA.norm(a, 3)\ntensor(5.8480)\n>>> LA.norm(a, -3)\n\
  tensor(0.)\n\n\nUsing the dim argument to compute vector norms:\n>>> c = torch.tensor([[1.,\
  \ 2., 3.],\n...                   [-1, 1, 4]])\n>>> LA.norm(c, dim=0)\ntensor([1.4142,\
  \ 2.2361, 5.0000])\n>>> LA.norm(c, dim=1)\ntensor([3.7417, 4.2426])\n>>> LA.norm(c,\
  \ ord=1, dim=1)\ntensor([6., 6.])\n\n\nUsing the dim argument to compute matrix\
  \ norms:\n>>> A = torch.arange(8, dtype=torch.float).reshape(2, 2, 2)\n>>> LA.norm(A,\
  \ dim=(1,2))\ntensor([ 3.7417, 11.2250])\n>>> LA.norm(A[0, :, :]), LA.norm(A[1,\
  \ :, :])\n(tensor(3.7417), tensor(11.2250))\n\n\n"
